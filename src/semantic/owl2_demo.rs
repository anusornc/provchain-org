//! Demo of owl2_rs integration with ProvChainOrg\n\nuse anyhow::Result;\nuse owl2_rs::model::{Ontology, Class, ClassExpression, Individual, Axiom};\n\n/// Demonstrate the integration of owl2_rs with ProvChainOrg\npub fn run_owl2_integration_demo() -> Result<()> {\n    println!(\"=== OWL2 Integration Demo ===\\n\");\n    \n    // Create a new ontology for supply chain traceability\n    let mut ontology = Ontology::new(Some(\"http://provchain.org/supplychain\".to_string()));\n    \n    // Add some prefixes for cleaner serialization\n    ontology.add_prefix(\"sc\", \"http://provchain.org/supplychain#\");\n    ontology.add_prefix(\"owl\", \"http://www.w3.org/2002/07/owl#\");\n    ontology.add_prefix(\"rdf\", \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\");\n    \n    // Create classes for supply chain entities\n    let product_class = Class::new(\"http://provchain.org/supplychain#Product\".to_string());\n    let batch_class = Class::new(\"http://provchain.org/supplychain#Batch\".to_string());\n    let facility_class = Class::new(\"http://provchain.org/supplychain#Facility\".to_string());\n    \n    // Create individuals\n    let milk_batch = Individual::named(\"http://provchain.org/supplychain#MilkBatch001\".to_string());\n    let dairy_farm = Individual::named(\"http://provchain.org/supplychain#DairyFarmXYZ\".to_string());\n    \n    // Create axioms\n    let product_class_expr = ClassExpression::Class(product_class);\n    let batch_class_expr = ClassExpression::Class(batch_class);\n    let facility_class_expr = ClassExpression::Class(facility_class);\n    \n    // Class assertions\n    let batch_is_product = Axiom::SubClassOf(owl2_rs::model::axiom::SubClassOfAxiom {\n        sub_class: batch_class_expr.clone(),\n        super_class: product_class_expr.clone(),\n        annotations: vec![],\n    });\n    \n    let milk_batch_assertion = Axiom::ClassAssertion(owl2_rs::model::axiom::ClassAssertionAxiom {\n        class: batch_class_expr,\n        individual: milk_batch.clone(),\n        annotations: vec![],\n    });\n    \n    let facility_assertion = Axiom::ClassAssertion(owl2_rs::model::axiom::ClassAssertionAxiom {\n        class: facility_class_expr,\n        individual: dairy_farm.clone(),\n        annotations: vec![],\n    });\n    \n    // Add all axioms to the ontology\n    ontology.add_axiom(batch_is_product);\n    ontology.add_axiom(milk_batch_assertion);\n    ontology.add_axiom(facility_assertion);\n    \n    // Display results\n    println!(\"Created ontology: {}\", ontology.iri.as_ref().unwrap_or(&\"Unnamed\".to_string()));\n    println!(\"Prefixes: {:?}\", ontology.prefixes);\n    println!(\"Number of axioms: {}\", ontology.axiom_count());\n    \n    // Show axiom details\n    println!(\"\\nAxioms:\");\n    for (i, axiom) in ontology.axioms.iter().enumerate() {\n        match axiom {\n            Axiom::SubClassOf(sub_class_axiom) => {\n                println!(\"  {}. SubClassOf: {:?} ⊑ {:?}\", i+1, sub_class_axiom.sub_class, sub_class_axiom.super_class);\n            },\n            Axiom::ClassAssertion(class_assertion) => {\n                println!(\"  {}. ClassAssertion: {:?} ∈ {:?}\", i+1, class_assertion.individual, class_assertion.class);\n            },\n            _ => println!(\"  {}. Other axiom type\", i+1),\n        }\n    }\n    \n    println!(\"\\n=== Demo Complete ===\");\n    println!(\"The owl2_rs library is successfully integrated with ProvChainOrg!\");\n    println!(\"This provides structured OWL2 ontology handling capabilities.\");\n    \n    Ok(())\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_owl2_integration_demo() -> Result<()> {\n        run_owl2_integration_demo()\n    }\n}