//! Healthcare domain adapter\n//!\n//! This module provides the healthcare domain adapter that extends\n//! the generic traceability system with healthcare specific validation\n//! and processing capabilities.\n\nuse crate::domain::plugin::{DomainPlugin, DomainConfig, ValidationResult, ProcessedEntity, EntityData};\nuse anyhow::Result;\nuse std::collections::HashMap;\nuse tracing::{info, warn, debug};\n\n/// Healthcare domain adapter\npub struct HealthcareAdapter {\n    config: DomainConfig,\n    validation_rules: HashMap<String, String>,\n    domain_properties: Vec<String>,\n}\n\nimpl HealthcareAdapter {\n    /// Create from configuration\n    pub fn from_config(_config: &serde_yaml::Value) -> Result<Self> {\n        let domain_config = DomainConfig {
            domain_id: "healthcare".to_string(),
            name: "Healthcare Traceability".to_string(),
            description: "Healthcare and medical traceability".to_string(),
            core_ontology_path: "ontologies/generic_core.owl".to_string(),
            domain_ontology_path: "ontologies/healthcare.owl".to_string(),
            ontology_path: "ontologies/healthcare.owl".to_string(),
            shacl_shapes_path: None,
            inference_rules_path: None,
            required_properties: vec![],
            validation_queries: vec![],
            enabled: true,
            priority: 1,
            custom_properties: HashMap::new(),
        };\n        \n        let mut adapter = HealthcareAdapter {\n            config: domain_config,\n            validation_rules: HashMap::new(),\n            domain_properties: Vec::new(),\n        };\n        \n        adapter.initialize_validation_rules();\n        adapter.initialize_domain_properties();\n        \n        Ok(adapter)\n    }\n    \n    /// Initialize validation rules\n    fn initialize_validation_rules(&mut self) {\n        self.validation_rules.insert(\n            \"PatientRecord\".to_string(),\n            \"Must have valid patient ID and medical information\".to_string()\n        );\n        self.validation_rules.insert(\n            \"Treatment\".to_string(),\n            \"Must have timestamp and treatment parameters\".to_string()\n        );\n        self.validation_rules.insert(\n            \"MedicalDevice\".to_string(),\n            \"Must have valid serial number and device information\".to_string()\n        );\n        self.validation_rules.insert(\n            \"HealthcareProvider\".to_string(),\n            \"Must have valid provider information\".to_string()\n        );\n        self.validation_rules.insert(\n            \"ClinicalTrial\".to_string(),\n            \"Must have trial ID and regulatory information\".to_string()\n        );\n    }\n    \n    /// Initialize domain properties\n    fn initialize_domain_properties(&mut self) {\n        self.domain_properties.extend(vec![\n            \"hasPatientID\".to_string(),\n            \"diagnosisDate\".to_string(),\n            \"treatmentOutcome\".to_string(),\n            \"medicalDeviceSerial\".to_string(),\n            \"procedureDate\".to_string(),\n            \"healthcareProviderName\".to_string(),\n            \"healthcareProviderAddress\".to_string(),\n            \"clinicalTrialID\".to_string(),\n            \"regulatoryBody\".to_string(),\n            \"approvalDate\".to_string(),\n        ]);\n    }\n}\n\nimpl DomainPlugin for HealthcareAdapter {\n    fn domain_id(&self) -> &str {\n        &self.config.domain_id\n    }\n    \n    fn name(&self) -> &str {\n        &self.config.name\n    }\n    \n    fn description(&self) -> &str {\n        &self.config.description\n    }\n    \n    fn is_valid_entity_type(&self, entity_type: &str) -> bool {\n        matches!(entity_type, \n            \"PatientRecord\" | \"Treatment\" | \"MedicalDevice\" | \n            \"HealthcareProvider\" | \"ClinicalTrial\" | \"Medication\"\n        )\n    }\n    \n    fn validation_rules(&self) -> &HashMap<String, String> {\n        &self.validation_rules\n    }\n    \n    fn domain_properties(&self) -> &Vec<String> {\n        &self.domain_properties\n    }\n    \n    fn initialize(&mut self, _config: &DomainConfig) -> Result<()> {\n        // Already initialized in from_config\n        Ok(())\n    }\n    \n    fn shutdown(&mut self) -> Result<()> {\n        // Cleanup any resources\n        Ok(())\n    }\n    \n    fn validate_entity(&self, entity_data: &EntityData) -> Result<ValidationResult> {\n        // Validate based on entity type\n        match entity_data.entity_type.as_str() {\n            \"PatientRecord\" => self.validate_patient_record(entity_data),\n            \"Treatment\" => self.validate_treatment(entity_data),\n            \"MedicalDevice\" => self.validate_medical_device(entity_data),\n            \"HealthcareProvider\" => self.validate_healthcare_provider(entity_data),\n            \"ClinicalTrial\" => self.validate_clinical_trial(entity_data),\n            \"Medication\" => self.validate_medication(entity_data),\n            _ => Ok(ValidationResult::Valid), // Allow unknown types with warning\n        }\n    }\n    \n    fn process_entity(&self, entity_data: &EntityData) -> Result<ProcessedEntity> {\n        // Process entity for healthcare domain\n        Ok(ProcessedEntity {\n            entity_id: entity_data.entity_id.clone(),\n            entity_type: entity_data.entity_type.clone(),\n            processed_data: self.enrich_healthcare_data(entity_data)?,\n            domain_context: \"healthcare\".to_string(),\n        })\n    }\n}\n\nimpl HealthcareAdapter {\n    /// Validate patient record\n    fn validate_patient_record(&self, entity_data: &EntityData) -> Result<ValidationResult> {\n        // Check required properties\n        if !entity_data.properties.contains_key(\"hasPatientID\") {\n            return Ok(ValidationResult::Invalid(\"Patient record must have hasPatientID\".to_string()));\n        }\n        \n        Ok(ValidationResult::Valid)\n    }\n    \n    /// Validate treatment\n    fn validate_treatment(&self, entity_data: &EntityData) -> Result<ValidationResult> {\n        // Check required properties\n        if !entity_data.properties.contains_key(\"procedureDate\") {\n            return Ok(ValidationResult::Invalid(\"Treatment must have procedureDate\".to_string()));\n        }\n        \n        Ok(ValidationResult::Valid)\n    }\n    \n    /// Validate medical device\n    fn validate_medical_device(&self, entity_data: &EntityData) -> Result<ValidationResult> {\n        // Check required properties\n        if !entity_data.properties.contains_key(\"medicalDeviceSerial\") {\n            return Ok(ValidationResult::Invalid(\"Medical device must have medicalDeviceSerial\".to_string()));\n        }\n        \n        Ok(ValidationResult::Valid)\n    }\n    \n    /// Validate healthcare provider\n    fn validate_healthcare_provider(&self, entity_data: &EntityData) -> Result<ValidationResult> {\n        // Check required properties\n        if !entity_data.properties.contains_key(\"healthcareProviderName\") {\n            return Ok(ValidationResult::Invalid(\"Healthcare provider must have healthcareProviderName\".to_string()));\n        }\n        \n        Ok(ValidationResult::Valid)\n    }\n    \n    /// Validate clinical trial\n    fn validate_clinical_trial(&self, entity_data: &EntityData) -> Result<ValidationResult> {\n        // Check required properties\n        if !entity_data.properties.contains_key(\"clinicalTrialID\") {\n            return Ok(ValidationResult::Invalid(\"Clinical trial must have clinicalTrialID\".to_string()));\n        }\n        \n        Ok(ValidationResult::Valid)\n    }\n    \n    /// Validate medication\n    fn validate_medication(&self, entity_data: &EntityData) -> Result<ValidationResult> {\n        // Check required properties\n        if !entity_data.properties.contains_key(\"medicationName\") {\n            return Ok(ValidationResult::Invalid(\"Medication must have medicationName\".to_string()));\n        }\n        \n        Ok(ValidationResult::Valid)\n    }\n    \n    /// Enrich healthcare data\n    fn enrich_healthcare_data(&self, entity_data: &EntityData) -> Result<String> {\n        // Add healthcare specific enrichment\n        let mut enriched_data = entity_data.data.clone();\n        \n        // Add healthcare context\n        enriched_data.push_str(\"\\n# Healthcare context\\n\");\n        enriched_data.push_str(\"@prefix healthcare: <http://provchain.org/healthcare#> .\\n\");\n        \n        // Add domain-specific annotations\n        enriched_data.push_str(&format!(\n            \"# Enriched by healthcare domain adapter\\n# Entity: {}\\n# Type: {}\\n\",\n            entity_data.entity_id, entity_data.entity_type\n        ));\n        \n        Ok(enriched_data)\n    }\n}