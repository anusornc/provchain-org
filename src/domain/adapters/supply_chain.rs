//! Supply chain domain adapter
//!
//! This module provides the supply chain domain adapter that extends
//! the generic traceability system with supply chain specific validation
//! and processing capabilities.

use crate::domain::plugin::{DomainPlugin, DomainConfig, ValidationResult, ProcessedEntity, EntityData};
use anyhow::Result;
use std::collections::HashMap;
use tracing::{info, warn, debug};

/// Supply chain domain adapter
pub struct SupplyChainAdapter {
    config: DomainConfig,
    validation_rules: HashMap<String, String>,
    domain_properties: Vec<String>,
}\n\nimpl SupplyChainAdapter {\n    /// Create from configuration\n    pub fn from_config(_config: &serde_yaml::Value) -> Result<Self> {\n        let domain_config = DomainConfig {\n            domain_id: \"supplychain\".to_string(),\n            name: \"Supply Chain Traceability\".to_string(),\n            description: \"General supply chain and manufacturing traceability\".to_string(),\n            core_ontology_path: \"ontologies/core.owl\".to_string(),\n            domain_ontology_path: \"ontologies/supply-chain.owl\".to_string(),\n            ontology_path: \"ontologies/supply-chain.owl\".to_string(),\n            shacl_shapes_path: None,\n            inference_rules_path: None,\n            required_properties: vec![],\n            validation_queries: vec![],\n            enabled: true,\n            priority: 1,\n            custom_properties: HashMap::new(),\n        };\n        \n        let mut adapter = SupplyChainAdapter {\n            config: domain_config,\n            validation_rules: HashMap::new(),\n            domain_properties: Vec::new(),\n        };\n        \n        adapter.initialize_validation_rules();\n        adapter.initialize_domain_properties();\n        \n        Ok(adapter)\n    }\n    \n    /// Initialize validation rules\n    fn initialize_validation_rules(&mut self) {\n        self.validation_rules.insert(\n            \"ProductBatch\".to_string(),\n            \"Must have valid batch ID and origin information\".to_string()\n        );\n        self.validation_rules.insert(\n            \"ProcessingActivity\".to_string(),\n            \"Must have timestamp and processing parameters\".to_string()\n        );\n        self.validation_rules.insert(\n            \"TransportActivity\".to_string(),\n            \"Must have origin, destination, and transport parameters\".to_string()\n        );\n        self.validation_rules.insert(\n            \"QualityCheck\".to_string(),\n            \"Must have timestamp and quality parameters\".to_string()\n        );\n        self.validation_rules.insert(\n            \"Supplier\".to_string(),\n            \"Must have valid supplier information\".to_string()\n        );\n    }\n    \n    /// Initialize domain properties\n    fn initialize_domain_properties(&mut self) {\n        self.domain_properties.extend(vec![\n            \"hasBatchID\".to_string(),\n            \"originFarm\".to_string(),\n            \"harvestDate\".to_string(),\n            \"processingDate\".to_string(),\n            \"transportDate\".to_string(),\n            \"qualityCheckDate\".to_string(),\n            \"hasTemperature\".to_string(),\n            \"hasHumidity\".to_string(),\n            \"supplierName\".to_string(),\n            \"supplierAddress\".to_string(),\n        ]);\n    }\n}\n\nimpl DomainPlugin for SupplyChainAdapter {\n    fn domain_id(&self) -> &str {\n        &self.config.domain_id\n    }\n    \n    fn name(&self) -> &str {\n        &self.config.name\n    }\n    \n    fn description(&self) -> &str {\n        &self.config.description\n    }\n    \n    fn is_valid_entity_type(&self, entity_type: &str) -> bool {\n        matches!(entity_type, \n            \"ProductBatch\" | \"ProcessingActivity\" | \"TransportActivity\" | \n            \"QualityCheck\" | \"Supplier\" | \"EnvironmentalCondition\"\n        )\n    }\n    \n    fn validation_rules(&self) -> &HashMap<String, String> {\n        &self.validation_rules\n    }\n    \n    fn domain_properties(&self) -> &Vec<String> {\n        &self.domain_properties\n    }\n    \n    fn initialize(&mut self, _config: &DomainConfig) -> Result<()> {\n        // Already initialized in from_config\n        Ok(())\n    }\n    \n    fn shutdown(&mut self) -> Result<()> {\n        // Cleanup any resources\n        Ok(())\n    }\n    \n    fn validate_entity(&self, entity_data: &EntityData) -> Result<ValidationResult> {\n        // Validate based on entity type\n        match entity_data.entity_type.as_str() {\n            \"ProductBatch\" => self.validate_product_batch(entity_data),\n            \"ProcessingActivity\" => self.validate_processing_activity(entity_data),\n            \"TransportActivity\" => self.validate_transport_activity(entity_data),\n            \"QualityCheck\" => self.validate_quality_check(entity_data),\n            \"Supplier\" => self.validate_supplier(entity_data),\n            _ => Ok(ValidationResult::Valid), // Allow unknown types with warning\n        }\n    }\n    \n    fn process_entity(&self, entity_data: &EntityData) -> Result<ProcessedEntity> {\n        // Process entity for supply chain domain\n        Ok(ProcessedEntity {\n            entity_id: entity_data.entity_id.clone(),\n            entity_type: entity_data.entity_type.clone(),\n            processed_data: self.enrich_supply_chain_data(entity_data)?,\n            domain_context: \"supplychain\".to_string(),\n        })\n    }\n}\n\nimpl SupplyChainAdapter {\n    /// Validate product batch\n    fn validate_product_batch(&self, entity_data: &EntityData) -> Result<ValidationResult> {\n        // Check required properties\n        if !entity_data.properties.contains_key(\"hasBatchID\") {\n            return Ok(ValidationResult::Invalid(\"Product batch must have hasBatchID\".to_string()));\n        }\n        \n        if !entity_data.properties.contains_key(\"originFarm\") {\n            return Ok(ValidationResult::Invalid(\"Product batch must have originFarm\".to_string()));\n        }\n        \n        Ok(ValidationResult::Valid)\n    }\n    \n    /// Validate processing activity\n    fn validate_processing_activity(&self, entity_data: &EntityData) -> Result<ValidationResult> {\n        // Check required properties\n        if !entity_data.properties.contains_key(\"processingDate\") {\n            return Ok(ValidationResult::Invalid(\"Processing activity must have processingDate\".to_string()));\n        }\n        \n        Ok(ValidationResult::Valid)\n    }\n    \n    /// Validate transport activity\n    fn validate_transport_activity(&self, entity_data: &EntityData) -> Result<ValidationResult> {\n        // Check required properties\n        if !entity_data.properties.contains_key(\"transportDate\") {\n            return Ok(ValidationResult::Invalid(\"Transport activity must have transportDate\".to_string()));\n        }\n        \n        Ok(ValidationResult::Valid)\n    }\n    \n    /// Validate quality check\n    fn validate_quality_check(&self, entity_data: &EntityData) -> Result<ValidationResult> {\n        // Check required properties\n        if !entity_data.properties.contains_key(\"qualityCheckDate\") {\n            return Ok(ValidationResult::Invalid(\"Quality check must have qualityCheckDate\".to_string()));\n        }\n        \n        Ok(ValidationResult::Valid)\n    }\n    \n    /// Validate supplier\n    fn validate_supplier(&self, entity_data: &EntityData) -> Result<ValidationResult> {\n        // Check required properties\n        if !entity_data.properties.contains_key(\"supplierName\") {\n            return Ok(ValidationResult::Invalid(\"Supplier must have supplierName\".to_string()));\n        }\n        \n        Ok(ValidationResult::Valid)\n    }\n    \n    /// Enrich supply chain data\n    fn enrich_supply_chain_data(&self, entity_data: &EntityData) -> Result<String> {\n        // Add supply chain specific enrichment\n        let mut enriched_data = entity_data.data.clone();\n        \n        // Add supply chain context\n        enriched_data.push_str(\"\\n# Supply chain context\\n\");\n        enriched_data.push_str(\"@prefix supplychain: <http://provchain.org/supplychain#> .\\n\");\n        \n        // Add domain-specific annotations\n        enriched_data.push_str(&format!(\n            \"# Enriched by supply chain domain adapter\\n# Entity: {}\\n# Type: {}\\n\",\n            entity_data.entity_id, entity_data.entity_type\n        ));\n        \n        Ok(enriched_data)\n    }\n}