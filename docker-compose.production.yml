version: '3.8'

services:
  # Main ProvChainOrg application
  provchain-org:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: provchain-org
    restart: unless-stopped
    ports:
      - "8080:8080"
      - "9090:9090"
    environment:
      - RUST_LOG=info
      - JWT_SECRET=${JWT_SECRET}
      - CONFIG_FILE=/app/config/production-deployment.toml
    volumes:
      - provchain_data:/app/data
      - provchain_backups:/app/backups
      - provchain_logs:/app/logs
    networks:
      - provchain_network
    depends_on:
      - prometheus
      - jaeger
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: provchain-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - provchain_network

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:10.0.0
    container_name: provchain-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - provchain_network
    depends_on:
      - prometheus

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.47
    container_name: provchain-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    volumes:
      - jaeger_data:/badger
    networks:
      - provchain_network

  # Redis for caching (optional)
  redis:
    image: redis:7.0-alpine
    container_name: provchain-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-provchain123}
    volumes:
      - redis_data:/data
    networks:
      - provchain_network

  # Nginx reverse proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: provchain-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    networks:
      - provchain_network
    depends_on:
      - provchain-org

  # Log aggregation with Loki
  loki:
    image: grafana/loki:2.8.0
    container_name: provchain-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    networks:
      - provchain_network

  # Log shipping with Promtail
  promtail:
    image: grafana/promtail:2.8.0
    container_name: provchain-promtail
    restart: unless-stopped
    volumes:
      - /var/log:/var/log:ro
      - provchain_logs:/app/logs:ro
      - ./monitoring/promtail.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    networks:
      - provchain_network
    depends_on:
      - loki

  # Database backup service
  backup:
    image: alpine:3.18
    container_name: provchain-backup
    restart: unless-stopped
    volumes:
      - provchain_data:/data:ro
      - provchain_backups:/backups
      - ./scripts/backup.sh:/backup.sh
    command: sh -c "chmod +x /backup.sh && crond -f"
    environment:
      - BACKUP_SCHEDULE=0 2 * * *
      - RETENTION_DAYS=30
    networks:
      - provchain_network

volumes:
  provchain_data:
    driver: local
  provchain_backups:
    driver: local
  provchain_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  jaeger_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  loki_data:
    driver: local

networks:
  provchain_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
