<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />

    <title>API Reference</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css?v=8e8a900e" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css?v=1d6d279e" />
    <link rel="stylesheet" type="text/css" href="../_static/copybutton.css?v=76b2166b" />
    <link rel="stylesheet" type="text/css" href="../_static/custom.css?v=3afbad45" />
    <link rel="stylesheet" type="text/css" href="../_static/interactive.css?v=267755d7" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="api-reference">
<h1>API Reference</h1>
<p>Welcome to the ProvChainOrg API documentation! This comprehensive reference provides detailed information about all available APIs, including REST endpoints, WebSocket connections, SPARQL queries, and integration interfaces.</p>
<div class="hero-section">
  <div class="hero-content">
    <h1>API Documentation</h1>
    <p class="hero-subtitle">Complete reference for integrating with ProvChainOrg through REST APIs, WebSocket connections, and SPARQL endpoints</p>
    <div class="hero-badges">
      <span class="badge badge-api">REST API</span>
      <span class="badge badge-websocket">WebSocket</span>
      <span class="badge badge-sparql">SPARQL</span>
      <span class="badge badge-integration">Integration Ready</span>
    </div>
  </div>
</div><section id="overview">
<h2>Overview</h2>
<p>The ProvChainOrg API provides multiple interfaces for integrating with the semantic blockchain platform. Each API serves different purposes and can be used independently or in combination to build comprehensive applications.</p>
<p><strong>API Components:</strong>
- <strong>REST API</strong>: Standard HTTP endpoints for web applications
- <strong>WebSocket API</strong>: Real-time updates and bidirectional communication
- <strong>SPARQL Endpoint</strong>: W3C-compliant semantic data querying
- <strong>GraphQL API</strong>: Flexible query interface (experimental)
- <strong>Webhooks</strong>: Event-driven notifications
- <strong>SDKs</strong>: Language-specific client libraries</p>
<p><strong>Authentication:</strong>
- API Key authentication
- JWT token-based authentication
- OAuth 2.0 integration
- Certificate-based authentication</p>
<p><strong>Rate Limiting:</strong>
- Configurable request limits
- Tiered access levels
- Burst handling
- Quota management</p>
<p><strong>Security Features:</strong>
- TLS/SSL encryption
- Request signing
- IP whitelisting
- Audit logging</p>
</section>
<section id="getting-started">
<h2>Getting Started</h2>
<p><strong>Prerequisites</strong>
- Basic understanding of HTTP APIs
- Familiarity with JSON data format
- Knowledge of blockchain concepts
- Understanding of semantic web technologies</p>
<p><strong>Quick Start</strong>
.. code-block:: bash</p>
<blockquote>
<div><p># Install the ProvChainOrg CLI
cargo install provchain-cli</p>
<p># Test API connectivity
provchain-cli api health</p>
<p># Get API key
provchain-cli auth create-api-key –name “my-application”</p>
</div></blockquote>
<p><strong>API Base URLs</strong>
- <strong>Production</strong>: <code class="docutils literal notranslate"><span class="pre">https://api.provchain-org.com</span></code>
- <strong>Staging</strong>: <code class="docutils literal notranslate"><span class="pre">https://staging-api.provchain-org.com</span></code>
- <strong>Development</strong>: <code class="docutils literal notranslate"><span class="pre">http://localhost:8080</span></code></p>
<p><strong>Common Headers</strong>
.. code-block:: http</p>
<blockquote>
<div><p>Content-Type: application/json
Authorization: Bearer YOUR_API_KEY
X-API-Version: 1.0
X-Request-ID: unique-request-id</p>
</div></blockquote>
</section>
<section id="rest-api">
<h2>REST API</h2>
<section id="authentication">
<h3>Authentication</h3>
<p><strong>API Key Authentication</strong>
.. code-block:: http</p>
<blockquote>
<div><p>POST /api/v1/auth/api-key
Host: api.provchain-org.com
Content-Type: application/json</p>
<dl class="simple">
<dt>{</dt><dd><p>“name”: “my-application”,
“description”: “Production API key”,
“permissions”: [“read”, “write”, “query”]</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p><strong>Response</strong>
.. code-block:: json</p>
<blockquote>
<div><dl class="simple">
<dt>{</dt><dd><p>“api_key”: “pk_test_1234567890abcdef”,
“secret_key”: “sk_test_1234567890abcdef”,
“permissions”: [“read”, “write”, “query”],
“created_at”: “2024-01-15T10:30:00Z”,
“expires_at”: “2024-12-31T23:59:59Z”</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p><strong>JWT Token Authentication</strong>
.. code-block:: http</p>
<blockquote>
<div><p>POST /api/v1/auth/token
Host: api.provchain-org.com
Content-Type: application/json</p>
<dl class="simple">
<dt>{</dt><dd><p>“api_key”: “pk_test_1234567890abcdef”,
“secret_key”: “sk_test_1234567890abcdef”</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p><strong>Response</strong>
.. code-block:: json</p>
<blockquote>
<div><dl class="simple">
<dt>{</dt><dd><p>“access_token”: “eyJhbGciOiJIUzI1NiIs…”,
“refresh_token”: “eyJhbGciOiJIUzI1NiIs…”,
“expires_in”: 3600,
“token_type”: “Bearer”</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
</section>
<section id="blockchain-api">
<h3>Blockchain API</h3>
<p><strong>Get Blockchain Status</strong>
.. code-block:: http</p>
<blockquote>
<div><p>GET /api/v1/blockchain/status
Host: api.provchain-org.com
Authorization: Bearer YOUR_JWT_TOKEN</p>
</div></blockquote>
<p><strong>Response</strong>
.. code-block:: json</p>
<blockquote>
<div><dl class="simple">
<dt>{</dt><dd><p>“height”: 12345,
“latest_block_hash”: “0x4a7b2c8f9e1d3a5b…”,
“total_transactions”: 98765,
“peers”: 5,
“uptime”: “15d 3h 42m”,
“version”: “0.1.0”</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p><strong>Get Block by Height</strong>
.. code-block:: http</p>
<blockquote>
<div><p>GET /api/v1/blocks/12345
Host: api.provchain-org.com
Authorization: Bearer YOUR_JWT_TOKEN</p>
</div></blockquote>
<p><strong>Response</strong>
.. code-block:: json</p>
<blockquote>
<div><dl>
<dt>{</dt><dd><p>“height”: 12345,
“hash”: “0x4a7b2c8f9e1d3a5b…”,
“previous_hash”: “0x9e8d7c6b5a4f3e2d…”,
“timestamp”: “2024-01-15T10:30:00Z”,
“transactions”: [</p>
<blockquote>
<div><dl>
<dt>{</dt><dd><p>“id”: “tx_1234567890”,
“type”: “supply_chain_data”,
“data”: {</p>
<blockquote>
<div><p>“&#64;context”: “<a class="reference external" href="https://schema.org">https://schema.org</a>”,
“&#64;type”: “ProductBatch”,
“product”: “Organic Tomatoes”,
“origin”: “Green Valley Farm”,
“harvestDate”: “2024-01-15”</p>
</div></blockquote>
<p>}</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p>]</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p><strong>Get Blocks by Range</strong>
.. code-block:: http</p>
<blockquote>
<div><p>GET /api/v1/blocks?start=12000&amp;end=12300
Host: api.provchain-org.com
Authorization: Bearer YOUR_JWT_TOKEN</p>
</div></blockquote>
<p><strong>Response</strong>
.. code-block:: json</p>
<blockquote>
<div><dl>
<dt>{</dt><dd><dl>
<dt>“blocks”: [</dt><dd><dl class="simple">
<dt>{</dt><dd><p>“height”: 12000,
“hash”: “0x1a2b3c4d5e6f7a8b…”,
“timestamp”: “2024-01-15T09:00:00Z”</p>
</dd>
</dl>
<p>},
{</p>
<blockquote>
<div><p>“height”: 12001,
“hash”: “0x9b8a7c6d5e4f3a2b…”,
“timestamp”: “2024-01-15T09:00:10Z”</p>
</div></blockquote>
<p>}</p>
</dd>
</dl>
<p>],
“total”: 301</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p><strong>Search Blocks</strong>
.. code-block:: http</p>
<blockquote>
<div><p>GET /api/v1/blocks/search?query=organic+tomatoes&amp;limit=10
Host: api.provchain-org.com
Authorization: Bearer YOUR_JWT_TOKEN</p>
</div></blockquote>
<p><strong>Response</strong>
.. code-block:: json</p>
<blockquote>
<div><dl>
<dt>{</dt><dd><dl>
<dt>“blocks”: [</dt><dd><dl>
<dt>{</dt><dd><p>“height”: 12345,
“hash”: “0x4a7b2c8f9e1d3a5b…”,
“timestamp”: “2024-01-15T10:30:00Z”,
“matches”: [</p>
<blockquote>
<div><dl class="simple">
<dt>{</dt><dd><p>“field”: “data.product”,
“value”: “Organic Tomatoes”,
“score”: 0.95</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p>]</p>
</dd>
</dl>
<p>}</p>
</dd>
</dl>
<p>],
“total”: 5</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
</section>
<section id="transaction-api">
<h3>Transaction API</h3>
<p><strong>Submit Transaction</strong>
.. code-block:: http</p>
<blockquote>
<div><p>POST /api/v1/transactions
Host: api.provchain-org.com
Authorization: Bearer YOUR_JWT_TOKEN
Content-Type: application/json</p>
<dl>
<dt>{</dt><dd><p>“type”: “supply_chain_data”,
“data”: {</p>
<blockquote>
<div><p>“&#64;context”: “<a class="reference external" href="https://schema.org">https://schema.org</a>”,
“&#64;type”: “ProductBatch”,
“product”: “Organic Tomatoes”,
“origin”: “Green Valley Farm”,
“harvestDate”: “2024-01-15”,
“temperature”: “2-4°C”,
“humidity”: “85%”</p>
</div></blockquote>
<p>}</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p><strong>Response</strong>
.. code-block:: json</p>
<blockquote>
<div><dl class="simple">
<dt>{</dt><dd><p>“tx_id”: “tx_1234567890”,
“status”: “pending”,
“height”: null,
“hash”: null,
“fee”: 0.001,
“timestamp”: “2024-01-15T10:30:00Z”</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p><strong>Get Transaction by ID</strong>
.. code-block:: http</p>
<blockquote>
<div><p>GET /api/v1/transactions/tx_1234567890
Host: api.provchain-org.com
Authorization: Bearer YOUR_JWT_TOKEN</p>
</div></blockquote>
<p><strong>Response</strong>
.. code-block:: json</p>
<blockquote>
<div><dl>
<dt>{</dt><dd><p>“tx_id”: “tx_1234567890”,
“status”: “confirmed”,
“height”: 12345,
“hash”: “0x4a7b2c8f9e1d3a5b…”,
“fee”: 0.001,
“timestamp”: “2024-01-15T10:30:00Z”,
“data”: {</p>
<blockquote>
<div><p>“&#64;context”: “<a class="reference external" href="https://schema.org">https://schema.org</a>”,
“&#64;type”: “ProductBatch”,
“product”: “Organic Tomatoes”,
“origin”: “Green Valley Farm”,
“harvestDate”: “2024-01-15”</p>
</div></blockquote>
<p>}</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p><strong>Get Transactions by Address</strong>
.. code-block:: http</p>
<blockquote>
<div><p>GET /api/v1/transactions?address=0x1234567890abcdef
Host: api.provchain-org.com
Authorization: Bearer YOUR_JWT_TOKEN</p>
</div></blockquote>
<p><strong>Response</strong>
.. code-block:: json</p>
<blockquote>
<div><dl>
<dt>{</dt><dd><dl>
<dt>“transactions”: [</dt><dd><dl class="simple">
<dt>{</dt><dd><p>“tx_id”: “tx_1234567890”,
“status”: “confirmed”,
“height”: 12345,
“timestamp”: “2024-01-15T10:30:00Z”</p>
</dd>
</dl>
<p>}</p>
</dd>
</dl>
<p>],
“total”: 42</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p><strong>Batch Transaction Submission</strong>
.. code-block:: http</p>
<blockquote>
<div><p>POST /api/v1/transactions/batch
Host: api.provchain-org.com
Authorization: Bearer YOUR_JWT_TOKEN
Content-Type: application/json</p>
<dl>
<dt>{</dt><dd><dl>
<dt>“transactions”: [</dt><dd><dl>
<dt>{</dt><dd><p>“type”: “supply_chain_data”,
“data”: {</p>
<blockquote>
<div><p>“&#64;context”: “<a class="reference external" href="https://schema.org">https://schema.org</a>”,
“&#64;type”: “ProductBatch”,
“product”: “Organic Tomatoes”,
“origin”: “Green Valley Farm”,
“harvestDate”: “2024-01-15”</p>
</div></blockquote>
<p>}</p>
</dd>
</dl>
<p>},
{</p>
<blockquote>
<div><p>“type”: “environmental_data”,
“data”: {</p>
<blockquote>
<div><p>“&#64;context”: “<a class="reference external" href="https://schema.org">https://schema.org</a>”,
“&#64;type”: “EnvironmentalCondition”,
“temperature”: “2-4°C”,
“humidity”: “85%”,
“timestamp”: “2024-01-15T10:30:00Z”</p>
</div></blockquote>
<p>}</p>
</div></blockquote>
<p>}</p>
</dd>
</dl>
<p>]</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p><strong>Response</strong>
.. code-block:: json</p>
<blockquote>
<div><dl>
<dt>{</dt><dd><p>“batch_id”: “batch_1234567890”,
“transactions”: [</p>
<blockquote>
<div><dl class="simple">
<dt>{</dt><dd><p>“tx_id”: “tx_1234567891”,
“status”: “pending”,
“fee”: 0.001</p>
</dd>
</dl>
<p>},
{</p>
<blockquote>
<div><p>“tx_id”: “tx_1234567892”,
“status”: “pending”,
“fee”: 0.001</p>
</div></blockquote>
<p>}</p>
</div></blockquote>
<p>],
“total_fee”: 0.002,
“timestamp”: “2024-01-15T10:30:00Z”</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
</section>
<section id="supply-chain-api">
<h3>Supply Chain API</h3>
<p><strong>Add Product Batch</strong>
.. code-block:: http</p>
<blockquote>
<div><p>POST /api/v1/supply-chain/batches
Host: api.provchain-org.com
Authorization: Bearer YOUR_JWT_TOKEN
Content-Type: application/json</p>
<dl>
<dt>{</dt><dd><p>“batch_id”: “batch_1234567890”,
“product”: “Organic Tomatoes”,
“origin”: “Green Valley Farm”,
“harvest_date”: “2024-01-15”,
“quantity”: 1000,
“unit”: “kg”,
“certifications”: [“Organic”, “Non-GMO”],
“environmental_conditions”: {</p>
<blockquote>
<div><p>“temperature”: “2-4°C”,
“humidity”: “85%”,
“co2_level”: “400ppm”</p>
</div></blockquote>
<p>}</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p><strong>Response</strong>
.. code-block:: json</p>
<blockquote>
<div><dl class="simple">
<dt>{</dt><dd><p>“batch_id”: “batch_1234567890”,
“tx_id”: “tx_1234567890”,
“status”: “confirmed”,
“height”: 12345,
“timestamp”: “2024-01-15T10:30:00Z”</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p><strong>Trace Product Batch</strong>
.. code-block:: http</p>
<blockquote>
<div><p>GET /api/v1/supply-chain/batches/batch_1234567890/trace
Host: api.provchain-org.com
Authorization: Bearer YOUR_JWT_TOKEN</p>
</div></blockquote>
<p><strong>Response</strong>
.. code-block:: json</p>
<blockquote>
<div><dl>
<dt>{</dt><dd><p>“batch_id”: “batch_1234567890”,
“product”: “Organic Tomatoes”,
“origin”: “Green Valley Farm”,
“current_location”: “Distribution Center”,
“trace_history”: [</p>
<blockquote>
<div><dl>
<dt>{</dt><dd><p>“event”: “harvest”,
“location”: “Green Valley Farm”,
“timestamp”: “2024-01-15T10:00:00Z”,
“data”: {</p>
<blockquote>
<div><p>“temperature”: “15-20°C”,
“humidity”: “70%”,
“workers”: 5</p>
</div></blockquote>
<p>}</p>
</dd>
</dl>
<p>},
{</p>
<blockquote>
<div><p>“event”: “transport”,
“location”: “Farm to Processing Plant”,
“timestamp”: “2024-01-15T12:00:00Z”,
“data”: {</p>
<blockquote>
<div><p>“temperature”: “2-4°C”,
“humidity”: “85%”,
“vehicle”: “Refrigerated Truck”</p>
</div></blockquote>
<p>}</p>
</div></blockquote>
<p>}</p>
</div></blockquote>
<p>]</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p><strong>Get Supply Chain Events</strong>
.. code-block:: http</p>
<blockquote>
<div><p>GET /api/v1/supply-chain/events?batch_id=batch_1234567890
Host: api.provchain-org.com
Authorization: Bearer YOUR_JWT_TOKEN</p>
</div></blockquote>
<p><strong>Response</strong>
.. code-block:: json</p>
<blockquote>
<div><dl>
<dt>{</dt><dd><dl>
<dt>“events”: [</dt><dd><dl>
<dt>{</dt><dd><p>“event_id”: “event_1234567890”,
“batch_id”: “batch_1234567890”,
“event_type”: “harvest”,
“location”: “Green Valley Farm”,
“timestamp”: “2024-01-15T10:00:00Z”,
“data”: {</p>
<blockquote>
<div><p>“temperature”: “15-20°C”,
“humidity”: “70%”,
“workers”: 5</p>
</div></blockquote>
<p>}</p>
</dd>
</dl>
<p>}</p>
</dd>
</dl>
<p>],
“total”: 5</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p><strong>Query Supply Chain Data</strong>
.. code-block:: http</p>
<blockquote>
<div><p>POST /api/v1/supply-chain/query
Host: api.provchain-org.com
Authorization: Bearer YOUR_JWT_TOKEN
Content-Type: application/json</p>
<dl>
<dt>{</dt><dd><dl>
<dt>“query”: {</dt><dd><p>“product”: “Organic Tomatoes”,
“origin”: “Green Valley Farm”,
“date_range”: {</p>
<blockquote>
<div><p>“start”: “2024-01-01”,
“end”: “2024-01-31”</p>
</div></blockquote>
<p>}</p>
</dd>
</dl>
<p>}</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p><strong>Response</strong>
.. code-block:: json</p>
<blockquote>
<div><dl>
<dt>{</dt><dd><dl>
<dt>“results”: [</dt><dd><dl class="simple">
<dt>{</dt><dd><p>“batch_id”: “batch_1234567890”,
“product”: “Organic Tomatoes”,
“origin”: “Green Valley Farm”,
“harvest_date”: “2024-01-15”,
“quantity”: 1000,
“status”: “in_transit”</p>
</dd>
</dl>
<p>}</p>
</dd>
</dl>
<p>],
“total”: 3</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
</section>
<section id="ontology-api">
<h3>Ontology API</h3>
<p><strong>Get Ontology Schema</strong>
.. code-block:: http</p>
<blockquote>
<div><p>GET /api/v1/ontology/schema
Host: api.provchain-org.com
Authorization: Bearer YOUR_JWT_TOKEN</p>
</div></blockquote>
<p><strong>Response</strong>
.. code-block:: json</p>
<blockquote>
<div><dl>
<dt>{</dt><dd><dl>
<dt>“schema”: {</dt><dd><p>“&#64;context”: “<a class="reference external" href="https://schema.org">https://schema.org</a>”,
“&#64;type”: “Ontology”,
“classes”: [</p>
<blockquote>
<div><dl>
<dt>{</dt><dd><p>“&#64;id”: “ProductBatch”,
“&#64;type”: “Class”,
“description”: “A batch of products in the supply chain”,
“properties”: [</p>
<blockquote>
<div><dl class="simple">
<dt>{</dt><dd><p>“&#64;id”: “product”,
“&#64;type”: “Property”,
“range”: “Product”,
“cardinality”: “1”</p>
</dd>
</dl>
<p>},
{</p>
<blockquote>
<div><p>“&#64;id”: “origin”,
“&#64;type”: “Property”,
“range”: “Farm”,
“cardinality”: “1”</p>
</div></blockquote>
<p>}</p>
</div></blockquote>
<p>]</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p>]</p>
</dd>
</dl>
<p>}</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p><strong>Validate Data Against Ontology</strong>
.. code-block:: http</p>
<blockquote>
<div><p>POST /api/v1/ontology/validate
Host: api.provchain-org.com
Authorization: Bearer YOUR_JWT_TOKEN
Content-Type: application/json</p>
<dl>
<dt>{</dt><dd><dl class="simple">
<dt>“data”: {</dt><dd><p>“&#64;context”: “<a class="reference external" href="https://schema.org">https://schema.org</a>”,
“&#64;type”: “ProductBatch”,
“product”: “Organic Tomatoes”,
“origin”: “Green Valley Farm”</p>
</dd>
</dl>
<p>},
“ontology”: “supply_chain”</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p><strong>Response</strong>
.. code-block:: json</p>
<blockquote>
<div><dl class="simple">
<dt>{</dt><dd><p>“valid”: true,
“errors”: [],
“warnings”: [],
“suggestions”: []</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p><strong>Get Ontology Classes</strong>
.. code-block:: http</p>
<blockquote>
<div><p>GET /api/v1/ontology/classes
Host: api.provchain-org.com
Authorization: Bearer YOUR_JWT_TOKEN</p>
</div></blockquote>
<p><strong>Response</strong>
.. code-block:: json</p>
<blockquote>
<div><dl>
<dt>{</dt><dd><dl>
<dt>“classes”: [</dt><dd><dl>
<dt>{</dt><dd><p>“id”: “ProductBatch”,
“label”: “Product Batch”,
“description”: “A batch of products in the supply chain”,
“properties”: [</p>
<blockquote>
<div><dl class="simple">
<dt>{</dt><dd><p>“id”: “product”,
“label”: “Product”,
“type”: “Product”,
“required”: true</p>
</dd>
</dl>
<p>},
{</p>
<blockquote>
<div><p>“id”: “origin”,
“label”: “Origin”,
“type”: “Farm”,
“required”: true</p>
</div></blockquote>
<p>}</p>
</div></blockquote>
<p>]</p>
</dd>
</dl>
<p>}</p>
</dd>
</dl>
<p>]</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p><strong>Get Ontology Properties</strong>
.. code-block:: http</p>
<blockquote>
<div><p>GET /api/v1/ontology/properties
Host: api.provchain-org.com
Authorization: Bearer YOUR_JWT_TOKEN</p>
</div></blockquote>
<p><strong>Response</strong>
.. code-block:: json</p>
<blockquote>
<div><dl>
<dt>{</dt><dd><dl>
<dt>“properties”: [</dt><dd><dl class="simple">
<dt>{</dt><dd><p>“id”: “product”,
“label”: “Product”,
“description”: “The product being tracked”,
“domain”: “ProductBatch”,
“range”: “Product”,
“cardinality”: “1”,
“required”: true</p>
</dd>
</dl>
<p>},
{</p>
<blockquote>
<div><p>“id”: “origin”,
“label”: “Origin”,
“description”: “The origin of the product”,
“domain”: “ProductBatch”,
“range”: “Farm”,
“cardinality”: “1”,
“required”: true</p>
</div></blockquote>
<p>}</p>
</dd>
</dl>
<p>]</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
</section>
</section>
<section id="websocket-api">
<h2>WebSocket API</h2>
<p><strong>Connection</strong>
.. code-block:: javascript</p>
<blockquote>
<div><p>const ws = new WebSocket(‘wss://api.provchain-org.com/ws’);</p>
<dl>
<dt>ws.onopen = function(event) {</dt><dd><p>console.log(‘WebSocket connected’);</p>
<p>// Authenticate
ws.send(JSON.stringify({</p>
<blockquote>
<div><p>type: ‘auth’,
token: ‘YOUR_JWT_TOKEN’</p>
</div></blockquote>
<p>}));</p>
</dd>
</dl>
<p>};</p>
</div></blockquote>
<p><strong>New Block Notification</strong>
.. code-block:: javascript</p>
<blockquote>
<div><dl>
<dt>ws.onmessage = function(event) {</dt><dd><p>const message = JSON.parse(event.data);</p>
<dl class="simple">
<dt>if (message.type === ‘new_block’) {</dt><dd><p>console.log(‘New block:’, message.block);
// Update UI or take action</p>
</dd>
</dl>
<p>}</p>
</dd>
</dl>
<p>};</p>
</div></blockquote>
<p><strong>Transaction Status Updates</strong>
.. code-block:: javascript</p>
<blockquote>
<div><dl>
<dt>ws.onmessage = function(event) {</dt><dd><p>const message = JSON.parse(event.data);</p>
<dl class="simple">
<dt>if (message.type === ‘transaction_update’) {</dt><dd><p>console.log(‘Transaction update:’, message.transaction);
// Update transaction status in UI</p>
</dd>
</dl>
<p>}</p>
</dd>
</dl>
<p>};</p>
</div></blockquote>
<p><strong>Supply Chain Events</strong>
.. code-block:: javascript</p>
<blockquote>
<div><dl>
<dt>ws.onmessage = function(event) {</dt><dd><p>const message = JSON.parse(event.data);</p>
<dl class="simple">
<dt>if (message.type === ‘supply_chain_event’) {</dt><dd><p>console.log(‘Supply chain event:’, message.event);
// Process real-time supply chain events</p>
</dd>
</dl>
<p>}</p>
</dd>
</dl>
<p>};</p>
</div></blockquote>
<p><strong>Query Results</strong>
.. code-block:: javascript</p>
<blockquote>
<div><dl>
<dt>ws.onmessage = function(event) {</dt><dd><p>const message = JSON.parse(event.data);</p>
<dl class="simple">
<dt>if (message.type === ‘query_result’) {</dt><dd><p>console.log(‘Query result:’, message.results);
// Update query results in UI</p>
</dd>
</dl>
<p>}</p>
</dd>
</dl>
<p>};</p>
</div></blockquote>
<p><strong>Subscription Management</strong>
.. code-block:: javascript</p>
<blockquote>
<div><p>// Subscribe to new blocks
ws.send(JSON.stringify({</p>
<blockquote>
<div><p>type: ‘subscribe’,
channel: ‘blocks’</p>
</div></blockquote>
<p>}));</p>
<p>// Subscribe to transaction updates
ws.send(JSON.stringify({</p>
<blockquote>
<div><p>type: ‘subscribe’,
channel: ‘transactions’</p>
</div></blockquote>
<p>}));</p>
<p>// Subscribe to supply chain events
ws.send(JSON.stringify({</p>
<blockquote>
<div><p>type: ‘subscribe’,
channel: ‘supply_chain’</p>
</div></blockquote>
<p>}));</p>
<p>// Unsubscribe from channels
ws.send(JSON.stringify({</p>
<blockquote>
<div><p>type: ‘unsubscribe’,
channel: ‘blocks’</p>
</div></blockquote>
<p>}));</p>
</div></blockquote>
</section>
<section id="sparql-api">
<h2>SPARQL API</h2>
<p><strong>SPARQL Query Endpoint</strong>
.. code-block:: http</p>
<blockquote>
<div><p>POST /sparql
Host: api.provchain-org.com
Authorization: Bearer YOUR_JWT_TOKEN
Content-Type: application/sparql-query</p>
<dl>
<dt>SELECT ?batch ?product ?farm WHERE {</dt><dd><dl class="simple">
<dt>?batch a :ProductBatch ;</dt><dd><p>:product ?product ;
:originFarm ?farm .</p>
</dd>
</dl>
<p>?farm :farmName “Green Valley Farm” .</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p><strong>Response</strong>
.. code-block:: json</p>
<blockquote>
<div><dl>
<dt>{</dt><dd><dl class="simple">
<dt>“head”: {</dt><dd><p>“vars”: [“batch”, “product”, “farm”]</p>
</dd>
</dl>
<p>},
“results”: {</p>
<blockquote>
<div><dl>
<dt>“bindings”: [</dt><dd><dl class="simple">
<dt>{</dt><dd><p>“batch”: { “type”: “uri”, “value”: “batch_1234567890” },
“product”: { “type”: “literal”, “value”: “Organic Tomatoes” },
“farm”: { “type”: “uri”, “value”: “farm_1234567890” }</p>
</dd>
</dl>
<p>}</p>
</dd>
</dl>
<p>]</p>
</div></blockquote>
<p>}</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p><strong>SPARQL Update Endpoint</strong>
.. code-block:: http</p>
<blockquote>
<div><p>POST /sparql
Host: api.provchain-org.com
Authorization: Bearer YOUR_JWT_TOKEN
Content-Type: application/sparql-update</p>
<dl class="simple">
<dt>INSERT DATA {</dt><dd><dl class="simple">
<dt>:batch_1234567890 a :ProductBatch ;</dt><dd><p>:product “Organic Tomatoes” ;
:originFarm :farm_1234567890 .</p>
</dd>
</dl>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p><strong>Response</strong>
.. code-block:: json</p>
<blockquote>
<div><dl class="simple">
<dt>{</dt><dd><p>“status”: “success”,
“message”: “Data inserted successfully”,
“timestamp”: “2024-01-15T10:30:00Z”</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p><strong>SPARQL Describe</strong>
.. code-block:: http</p>
<blockquote>
<div><p>POST /sparql
Host: api.provchain-org.com
Authorization: Bearer YOUR_JWT_TOKEN
Content-Type: application/sparql-query</p>
<dl class="simple">
<dt>DESCRIBE ?batch WHERE {</dt><dd><dl class="simple">
<dt>?batch a :ProductBatch ;</dt><dd><p>:product “Organic Tomatoes” .</p>
</dd>
</dl>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p><strong>Response</strong>
.. code-block:: turtle</p>
<blockquote>
<div><p>&#64;prefix : &lt;<a class="reference external" href="http://example.org/">http://example.org/</a>&gt; .</p>
<dl class="simple">
<dt>:batch_1234567890 a :ProductBatch ;</dt><dd><p>:product “Organic Tomatoes” ;
:originFarm :farm_1234567890 ;
:harvestDate “2024-01-15” .</p>
</dd>
</dl>
</div></blockquote>
<p><strong>SPARQL Ask</strong>
.. code-block:: http</p>
<blockquote>
<div><p>POST /sparql
Host: api.provchain-org.com
Authorization: Bearer YOUR_JWT_TOKEN
Content-Type: application/sparql-query</p>
<dl class="simple">
<dt>ASK WHERE {</dt><dd><dl class="simple">
<dt>?batch a :ProductBatch ;</dt><dd><p>:product “Organic Tomatoes” ;
:originFarm :farm_1234567890 .</p>
</dd>
</dl>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p><strong>Response</strong>
.. code-block:: json</p>
<blockquote>
<div><dl class="simple">
<dt>{</dt><dd><p>“boolean”: true</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p><strong>SPARQL Construct</strong>
.. code-block:: http</p>
<blockquote>
<div><p>POST /sparql
Host: api.provchain-org.com
Authorization: Bearer YOUR_JWT_TOKEN
Content-Type: application/sparql-query</p>
<p>CONSTRUCT { ?batch ?p ?o }
WHERE {</p>
<blockquote>
<div><dl class="simple">
<dt>?batch a :ProductBatch ;</dt><dd><p>?p ?o .</p>
</dd>
</dl>
</div></blockquote>
<p>}</p>
</div></blockquote>
<p><strong>Response</strong>
.. code-block:: turtle</p>
<blockquote>
<div><p>&#64;prefix : &lt;<a class="reference external" href="http://example.org/">http://example.org/</a>&gt; .</p>
<dl class="simple">
<dt>:batch_1234567890 a :ProductBatch ;</dt><dd><p>:product “Organic Tomatoes” ;
:originFarm :farm_1234567890 ;
:harvestDate “2024-01-15” .</p>
</dd>
</dl>
</div></blockquote>
</section>
<section id="graphql-api">
<h2>GraphQL API</h2>
<p><strong>GraphQL Schema</strong>
.. code-block:: graphql</p>
<blockquote>
<div><dl class="simple">
<dt>type Query {</dt><dd><p>blockchainStatus: BlockchainStatus
block(height: Int!): Block
blocks(start: Int, end: Int): [Block]
transaction(id: ID!): Transaction
transactionsByAddress(address: String!): [Transaction]
supplyChainBatch(id: ID!): SupplyChainBatch
traceProductBatch(id: ID!): TraceResult
ontologySchema: OntologySchema</p>
</dd>
</dl>
<p>}</p>
<dl class="simple">
<dt>type Mutation {</dt><dd><p>submitTransaction(data: JSON!): Transaction
addSupplyChainBatch(batch: SupplyChainBatchInput!): SupplyChainBatch
validateData(data: JSON!, ontology: String!): ValidationResult</p>
</dd>
</dl>
<p>}</p>
<dl class="simple">
<dt>type Subscription {</dt><dd><p>newBlock: Block
transactionUpdate: Transaction
supplyChainEvent: SupplyChainEvent</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p><strong>GraphQL Query Example</strong>
.. code-block:: graphql</p>
<blockquote>
<div><dl>
<dt>query GetSupplyChainTrace {</dt><dd><dl>
<dt>traceProductBatch(id: “batch_1234567890”) {</dt><dd><p>batchId
product
origin
traceHistory {</p>
<blockquote>
<div><p>event
location
timestamp
data</p>
</div></blockquote>
<p>}</p>
</dd>
</dl>
<p>}</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p><strong>Response</strong>
.. code-block:: json</p>
<blockquote>
<div><dl>
<dt>{</dt><dd><dl>
<dt>“data”: {</dt><dd><dl>
<dt>“traceProductBatch”: {</dt><dd><p>“batchId”: “batch_1234567890”,
“product”: “Organic Tomatoes”,
“origin”: “Green Valley Farm”,
“traceHistory”: [</p>
<blockquote>
<div><dl>
<dt>{</dt><dd><p>“event”: “harvest”,
“location”: “Green Valley Farm”,
“timestamp”: “2024-01-15T10:00:00Z”,
“data”: {</p>
<blockquote>
<div><p>“temperature”: “15-20°C”,
“humidity”: “70%”,
“workers”: 5</p>
</div></blockquote>
<p>}</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p>]</p>
</dd>
</dl>
<p>}</p>
</dd>
</dl>
<p>}</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p><strong>GraphQL Mutation Example</strong>
.. code-block:: graphql</p>
<blockquote>
<div><dl>
<dt>mutation AddSupplyChainBatch {</dt><dd><dl>
<dt>addSupplyChainBatch(</dt><dd><dl class="simple">
<dt>batch: {</dt><dd><p>batchId: “batch_1234567890”,
product: “Organic Tomatoes”,
origin: “Green Valley Farm”,
harvestDate: “2024-01-15”,
quantity: 1000,
unit: “kg”</p>
</dd>
</dl>
<p>}</p>
</dd>
<dt>) {</dt><dd><p>batchId
transaction {</p>
<blockquote>
<div><p>id
status
timestamp</p>
</div></blockquote>
<p>}</p>
</dd>
</dl>
<p>}</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p><strong>Response</strong>
.. code-block:: json</p>
<blockquote>
<div><dl>
<dt>{</dt><dd><dl>
<dt>“data”: {</dt><dd><dl>
<dt>“addSupplyChainBatch”: {</dt><dd><p>“batchId”: “batch_1234567890”,
“transaction”: {</p>
<blockquote>
<div><p>“id”: “tx_1234567890”,
“status”: “confirmed”,
“timestamp”: “2024-01-15T10:30:00Z”</p>
</div></blockquote>
<p>}</p>
</dd>
</dl>
<p>}</p>
</dd>
</dl>
<p>}</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p><strong>GraphQL Subscription Example</strong>
.. code-block:: graphql</p>
<blockquote>
<div><dl>
<dt>subscription ListenForNewBlocks {</dt><dd><dl class="simple">
<dt>newBlock {</dt><dd><p>height
hash
timestamp
transactionCount</p>
</dd>
</dl>
<p>}</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p><strong>Response</strong>
.. code-block:: json</p>
<blockquote>
<div><dl>
<dt>{</dt><dd><dl>
<dt>“data”: {</dt><dd><dl class="simple">
<dt>“newBlock”: {</dt><dd><p>“height”: 12345,
“hash”: “0x4a7b2c8f9e1d3a5b…”,
“timestamp”: “2024-01-15T10:30:00Z”,
“transactionCount”: 3</p>
</dd>
</dl>
<p>}</p>
</dd>
</dl>
<p>}</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
</section>
<section id="webhooks">
<h2>Webhooks</h2>
<p><strong>Create Webhook</strong>
.. code-block:: http</p>
<blockquote>
<div><p>POST /api/v1/webhooks
Host: api.provchain-org.com
Authorization: Bearer YOUR_JWT_TOKEN
Content-Type: application/json</p>
<dl class="simple">
<dt>{</dt><dd><p>“name”: “New Block Notification”,
“url”: “<a class="reference external" href="https://your-app.com/webhooks/new-block">https://your-app.com/webhooks/new-block</a>”,
“events”: [“new_block”, “transaction_confirmed”],
“secret”: “your-webhook-secret”,
“active”: true</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p><strong>Response</strong>
.. code-block:: json</p>
<blockquote>
<div><dl class="simple">
<dt>{</dt><dd><p>“webhook_id”: “wh_1234567890”,
“name”: “New Block Notification”,
“url”: “<a class="reference external" href="https://your-app.com/webhooks/new-block">https://your-app.com/webhooks/new-block</a>”,
“events”: [“new_block”, “transaction_confirmed”],
“secret”: “your-webhook-secret”,
“active”: true,
“created_at”: “2024-01-15T10:30:00Z”</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p><strong>Webhook Payload Example</strong>
.. code-block:: json</p>
<blockquote>
<div><dl>
<dt>{</dt><dd><p>“event”: “new_block”,
“webhook_id”: “wh_1234567890”,
“timestamp”: “2024-01-15T10:30:00Z”,
“data”: {</p>
<blockquote>
<div><p>“height”: 12345,
“hash”: “0x4a7b2c8f9e1d3a5b…”,
“previous_hash”: “0x9e8d7c6b5a4f3e2d…”,
“timestamp”: “2024-01-15T10:30:00Z”,
“transactions”: [</p>
<blockquote>
<div><dl>
<dt>{</dt><dd><p>“id”: “tx_1234567890”,
“type”: “supply_chain_data”,
“data”: {</p>
<blockquote>
<div><p>“&#64;context”: “<a class="reference external" href="https://schema.org">https://schema.org</a>”,
“&#64;type”: “ProductBatch”,
“product”: “Organic Tomatoes”,
“origin”: “Green Valley Farm”</p>
</div></blockquote>
<p>}</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p>]</p>
</div></blockquote>
<p>}</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p><strong>Webhook Signature Verification</strong>
.. code-block:: javascript</p>
<blockquote>
<div><p>const crypto = require(‘crypto’);</p>
<dl>
<dt>function verifyWebhookSignature(payload, signature, secret) {</dt><dd><p>const hmac = crypto.createHmac(‘sha256’, secret);
const digest = hmac.update(payload).digest(‘hex’);
return crypto.timingSafeEqual(</p>
<blockquote>
<div><p>Buffer.from(signature),
Buffer.from(<cite>sha256=${digest}</cite>)</p>
</div></blockquote>
<p>);</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p><strong>Response Handling</strong>
.. code-block:: http</p>
<blockquote>
<div><p>HTTP/1.1 200 OK
Content-Type: application/json</p>
<dl class="simple">
<dt>{</dt><dd><p>“status”: “received”,
“webhook_id”: “wh_1234567890”,
“timestamp”: “2024-01-15T10:30:00Z”</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
</section>
<section id="sdks-and-libraries">
<h2>SDKs and Libraries</h2>
<p><strong>Python SDK</strong>
.. code-block:: python</p>
<blockquote>
<div><p>from provchain import ProvChainClient</p>
<p># Initialize client
client = ProvChainClient(</p>
<blockquote>
<div><p>api_key=”pk_test_1234567890abcdef”,
base_url=”<a class="reference external" href="https://api.provchain-org.com">https://api.provchain-org.com</a>”</p>
</div></blockquote>
<p>)</p>
<p># Get blockchain status
status = client.blockchain.get_status()
print(f”Current height: {status.height}”)</p>
<p># Submit transaction
transaction = client.transactions.submit({</p>
<blockquote>
<div><p>“type”: “supply_chain_data”,
“data”: {</p>
<blockquote>
<div><p>“&#64;context”: “<a class="reference external" href="https://schema.org">https://schema.org</a>”,
“&#64;type”: “ProductBatch”,
“product”: “Organic Tomatoes”,
“origin”: “Green Valley Farm”</p>
</div></blockquote>
<p>}</p>
</div></blockquote>
<p>})</p>
<p># Query supply chain data
results = client.supply_chain.query({</p>
<blockquote>
<div><p>“product”: “Organic Tomatoes”,
“origin”: “Green Valley Farm”</p>
</div></blockquote>
<p>})</p>
</div></blockquote>
<p><strong>JavaScript SDK</strong>
.. code-block:: javascript</p>
<blockquote>
<div><p>import { ProvChainClient } from <a class="reference external" href="mailto:'&#37;&#52;&#48;provchain/client">‘<span>&#64;</span>provchain/client</a>’;</p>
<p>// Initialize client
const client = new ProvChainClient({</p>
<blockquote>
<div><p>apiKey: ‘pk_test_1234567890abcdef’,
baseUrl: ‘<a class="reference external" href="https://api.provchain-org.com">https://api.provchain-org.com</a>’</p>
</div></blockquote>
<p>});</p>
<p>// Get blockchain status
const status = await client.blockchain.getStatus();
console.log(<cite>Current height: ${status.height}</cite>);</p>
<p>// Submit transaction
const transaction = await client.transactions.submit({</p>
<blockquote>
<div><p>type: ‘supply_chain_data’,
data: {</p>
<blockquote>
<div><p><a class="reference external" href="mailto:'&#37;&#52;&#48;context">‘<span>&#64;</span>context</a>’: ‘<a class="reference external" href="https://schema.org">https://schema.org</a>’,
<a class="reference external" href="mailto:'&#37;&#52;&#48;type">‘<span>&#64;</span>type</a>’: ‘ProductBatch’,
product: ‘Organic Tomatoes’,
origin: ‘Green Valley Farm’</p>
</div></blockquote>
<p>}</p>
</div></blockquote>
<p>});</p>
<p>// Query supply chain data
const results = await client.supplyChain.query({</p>
<blockquote>
<div><p>product: ‘Organic Tomatoes’,
origin: ‘Green Valley Farm’</p>
</div></blockquote>
<p>});</p>
</div></blockquote>
<p><strong>Java SDK</strong>
.. code-block:: java</p>
<blockquote>
<div><p>import org.provchain.client.ProvChainClient;
import org.provchain.model.BlockchainStatus;</p>
<dl>
<dt>public class ProvChainExample {</dt><dd><dl>
<dt>public static void main(String[] args) {</dt><dd><p>// Initialize client
ProvChainClient client = new ProvChainClient(</p>
<blockquote>
<div><p>“pk_test_1234567890abcdef”,
“<a class="reference external" href="https://api.provchain-org.com">https://api.provchain-org.com</a>”</p>
</div></blockquote>
<p>);</p>
<p>// Get blockchain status
BlockchainStatus status = client.blockchain().getStatus();
System.out.println(“Current height: “ + status.getHeight());</p>
<p>// Submit transaction
Transaction transaction = client.transactions().submit(</p>
<blockquote>
<div><dl>
<dt>new TransactionRequest()</dt><dd><p>.setType(“supply_chain_data”)
.setData(Map.of(</p>
<blockquote>
<div><p>“&#64;context”, “<a class="reference external" href="https://schema.org">https://schema.org</a>”,
“&#64;type”, “ProductBatch”,
“product”, “Organic Tomatoes”,
“origin”, “Green Valley Farm”</p>
</div></blockquote>
<p>))</p>
</dd>
</dl>
</div></blockquote>
<p>);</p>
</dd>
</dl>
<p>}</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p><strong>Go SDK</strong>
.. code-block:: go</p>
<blockquote>
<div><p>package main</p>
<dl class="simple">
<dt>import (</dt><dd><p>“fmt”
“github.com/provchain/client-go”</p>
</dd>
</dl>
<p>)</p>
<dl>
<dt>func main() {</dt><dd><p>// Initialize client
client := provchain.NewClient(</p>
<blockquote>
<div><p>“pk_test_1234567890abcdef”,
“<a class="reference external" href="https://api.provchain-org.com">https://api.provchain-org.com</a>”,</p>
</div></blockquote>
<p>)</p>
<p>// Get blockchain status
status, err := client.Blockchain.GetStatus()
if err != nil {</p>
<blockquote>
<div><p>panic(err)</p>
</div></blockquote>
<p>}
fmt.Printf(“Current height: %dn”, status.Height)</p>
<p>// Submit transaction
transaction, err := client.Transactions.Submit(map[string]interface{}{</p>
<blockquote>
<div><p>“type”: “supply_chain_data”,
“data”: map[string]interface{}{</p>
<blockquote>
<div><p>“&#64;context”: “<a class="reference external" href="https://schema.org">https://schema.org</a>”,
“&#64;type”:   “ProductBatch”,
“product”: “Organic Tomatoes”,
“origin”:  “Green Valley Farm”,</p>
</div></blockquote>
<p>},</p>
</div></blockquote>
<p>})
if err != nil {</p>
<blockquote>
<div><p>panic(err)</p>
</div></blockquote>
<p>}
fmt.Printf(“Transaction ID: %sn”, transaction.ID)</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
</section>
<section id="rate-limiting-and-quotas">
<h2>Rate Limiting and Quotas</h2>
<p><strong>Rate Limits</strong>
.. code-block:: http</p>
<blockquote>
<div><p>HTTP/1.1 200 OK
X-RateLimit-Limit: 1000
X-RateLimit-Remaining: 999
X-RateLimit-Reset: 1642248600
X-RateLimit-Reset-Time: “2024-01-15T10:30:00Z”</p>
<dl class="simple">
<dt>{</dt><dd><p>“data”: {…}</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p><strong>Rate Limit Headers</strong>
- <code class="docutils literal notranslate"><span class="pre">X-RateLimit-Limit</span></code>: Maximum number of requests allowed in the time window
- <code class="docutils literal notranslate"><span class="pre">X-RateLimit-Remaining</span></code>: Number of requests remaining in the current window
- <code class="docutils literal notranslate"><span class="pre">X-RateLimit-Reset</span></code>: Unix timestamp when the rate limit resets
- <code class="docutils literal notranslate"><span class="pre">X-RateLimit-Reset-Time</span></code>: Human-readable timestamp when the rate limit resets</p>
<p><strong>Rate Limit Response</strong>
.. code-block:: http</p>
<blockquote>
<div><p>HTTP/1.1 429 Too Many Requests
Content-Type: application/json
X-RateLimit-Limit: 1000
X-RateLimit-Remaining: 0
X-RateLimit-Reset: 1642248600
Retry-After: 3600</p>
<dl>
<dt>{</dt><dd><dl class="simple">
<dt>“error”: {</dt><dd><p>“code”: “RATE_LIMIT_EXCEEDED”,
“message”: “Rate limit exceeded. Try again later.”,
“retry_after”: 3600</p>
</dd>
</dl>
<p>}</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p><strong>Quota Management</strong>
.. code-block:: http</p>
<blockquote>
<div><p>GET /api/v1/account/quotas
Host: api.provchain-org.com
Authorization: Bearer YOUR_JWT_TOKEN</p>
</div></blockquote>
<p><strong>Response</strong>
.. code-block:: json</p>
<blockquote>
<div><dl>
<dt>{</dt><dd><dl class="simple">
<dt>“quotas”: {</dt><dd><p>“requests_per_minute”: 1000,
“requests_per_hour”: 10000,
“requests_per_day”: 100000,
“data_storage_mb”: 1000,
“api_calls_per_month”: 1000000</p>
</dd>
</dl>
<p>},
“usage”: {</p>
<blockquote>
<div><p>“requests_per_minute”: 150,
“requests_per_hour”: 1200,
“requests_per_day”: 8500,
“data_storage_mb”: 450,
“api_calls_this_month”: 45000</p>
</div></blockquote>
<p>}</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
</section>
<section id="error-handling">
<h2>Error Handling</h2>
<p><strong>Error Response Format</strong>
.. code-block:: json</p>
<blockquote>
<div><dl>
<dt>{</dt><dd><dl>
<dt>“error”: {</dt><dd><p>“code”: “INVALID_REQUEST”,
“message”: “The request is invalid”,
“details”: {</p>
<blockquote>
<div><p>“field”: “data.product”,
“issue”: “Product name is required”</p>
</div></blockquote>
<p>},
“request_id”: “req_1234567890”</p>
</dd>
</dl>
<p>}</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p><strong>Common Error Codes</strong>
- <code class="docutils literal notranslate"><span class="pre">INVALID_REQUEST</span></code>: The request format is invalid
- <code class="docutils literal notranslate"><span class="pre">AUTHENTICATION_FAILED</span></code>: Authentication failed
- <code class="docutils literal notranslate"><span class="pre">INSUFFICIENT_PERMISSIONS</span></code>: User lacks required permissions
- <code class="docutils literal notranslate"><span class="pre">RESOURCE_NOT_FOUND</span></code>: The requested resource doesn’t exist
- <code class="docutils literal notranslate"><span class="pre">RATE_LIMIT_EXCEEDED</span></code>: Rate limit exceeded
- <code class="docutils literal notranslate"><span class="pre">VALIDATION_ERROR</span></code>: Data validation failed
- <code class="docutils literal notranslate"><span class="pre">INTERNAL_ERROR</span></code>: Internal server error
- <code class="docutils literal notranslate"><span class="pre">SERVICE_UNAVAILABLE</span></code>: Service is temporarily unavailable</p>
<p><strong>Error Handling Example</strong>
.. code-block:: javascript</p>
<blockquote>
<div><dl>
<dt>async function callAPI() {</dt><dd><dl>
<dt>try {</dt><dd><dl>
<dt>const response = await fetch(’<a class="reference external" href="https://api.provchain-org.com/api/v1/blocks">https://api.provchain-org.com/api/v1/blocks</a>’, {</dt><dd><dl class="simple">
<dt>headers: {</dt><dd><p>‘Authorization’: <cite>Bearer ${token}</cite>,
‘Content-Type’: ‘application/json’</p>
</dd>
</dl>
<p>}</p>
</dd>
</dl>
<p>});</p>
<dl class="simple">
<dt>if (!response.ok) {</dt><dd><p>const error = await response.json();
throw new Error(<cite>API Error: ${error.error.message}</cite>);</p>
</dd>
</dl>
<p>}</p>
<p>const data = await response.json();
return data;</p>
</dd>
<dt>} catch (error) {</dt><dd><p>console.error(‘API call failed:’, error);
// Handle error appropriately</p>
</dd>
</dl>
<p>}</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p><strong>Retry Logic</strong>
.. code-block:: javascript</p>
<blockquote>
<div><dl>
<dt>async function retryAPIRequest(requestFn, maxRetries = 3) {</dt><dd><p>let lastError;</p>
<dl>
<dt>for (let i = 0; i &lt; maxRetries; i++) {</dt><dd><dl>
<dt>try {</dt><dd><p>const response = await requestFn();
if (response.status &gt;= 200 &amp;&amp; response.status &lt; 300) {</p>
<blockquote>
<div><p>return response;</p>
</div></blockquote>
<p>}</p>
<p>// Don’t retry client errors
if (response.status &gt;= 400 &amp;&amp; response.status &lt; 500) {</p>
<blockquote>
<div><p>throw new Error(<cite>Client error: ${response.status}</cite>);</p>
</div></blockquote>
<p>}</p>
<p>lastError = new Error(<cite>Server error: ${response.status}</cite>);
await new Promise(resolve =&gt; setTimeout(resolve, 1000 * Math.pow(2, i)));</p>
</dd>
<dt>} catch (error) {</dt><dd><p>lastError = error;
if (i === maxRetries - 1) {</p>
<blockquote>
<div><p>throw lastError;</p>
</div></blockquote>
<p>}</p>
</dd>
</dl>
<p>}</p>
</dd>
</dl>
<p>}</p>
<p>throw lastError;</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
</section>
<section id="webhooks-integration">
<h2>Webhooks Integration</h2>
<p><strong>Webhook Event Types</strong>
- <code class="docutils literal notranslate"><span class="pre">new_block</span></code>: New block added to blockchain
- <code class="docutils literal notranslate"><span class="pre">transaction_pending</span></code>: Transaction received and pending
- <code class="docutils literal notranslate"><span class="pre">transaction_confirmed</span></code>: Transaction confirmed in block
- <code class="docutils literal notranslate"><span class="pre">transaction_failed</span></code>: Transaction failed
- <code class="docutils literal notranslate"><span class="pre">supply_chain_event</span></code>: Supply chain event occurred
- <code class="docutils literal notranslate"><span class="pre">ontology_update</span></code>: Ontology schema updated
- <code class="docutils literal notranslate"><span class="pre">system_alert</span></code>: System alert or notification</p>
<p><strong>Webhook Security</strong>
.. code-block:: python</p>
<blockquote>
<div><p>import hmac
import hashlib
import json</p>
<dl>
<dt>def verify_webhook_signature(payload, signature, secret):</dt><dd><p># Parse payload
data = json.loads(payload)</p>
<p># Create signature
hmac_obj = hmac.new(</p>
<blockquote>
<div><p>secret.encode(‘utf-8’),
payload.encode(‘utf-8’),
hashlib.sha256</p>
</div></blockquote>
<p>)
expected_signature = hmac_obj.hexdigest()</p>
<p># Compare signatures
return hmac.compare_digest(signature, expected_signature)</p>
</dd>
</dl>
</div></blockquote>
<p><strong>Webhook Processing</strong>
.. code-block:: python</p>
<blockquote>
<div><p>from flask import Flask, request, jsonify</p>
<p>app = Flask(__name__)</p>
<p>&#64;app.route(‘/webhooks/provchain’, methods=[‘POST’])
def handle_webhook():</p>
<blockquote>
<div><p># Verify signature
signature = request.headers.get(‘X-Signature’)
if not verify_webhook_signature(</p>
<blockquote>
<div><p>request.data,
signature,
app.config[‘WEBHOOK_SECRET’]</p>
</div></blockquote>
<dl class="simple">
<dt>):</dt><dd><p>return jsonify({‘error’: ‘Invalid signature’}), 401</p>
</dd>
</dl>
<p># Process webhook
event = request.json</p>
<dl class="simple">
<dt>if event[‘event’] == ‘new_block’:</dt><dd><p>process_new_block(event[‘data’])</p>
</dd>
<dt>elif event[‘event’] == ‘transaction_confirmed’:</dt><dd><p>process_transaction(event[‘data’])</p>
</dd>
<dt>elif event[‘event’] == ‘supply_chain_event’:</dt><dd><p>process_supply_chain_event(event[‘data’])</p>
</dd>
</dl>
<p>return jsonify({‘status’: ‘received’}), 200</p>
</div></blockquote>
</div></blockquote>
</section>
<section id="monitoring-and-analytics">
<h2>Monitoring and Analytics</h2>
<p><strong>API Metrics</strong>
.. code-block:: http</p>
<blockquote>
<div><p>GET /api/v1/metrics
Host: api.provchain-org.com
Authorization: Bearer YOUR_JWT_TOKEN</p>
</div></blockquote>
<p><strong>Response</strong>
.. code-block:: json</p>
<blockquote>
<div><dl>
<dt>{</dt><dd><dl class="simple">
<dt>“metrics”: {</dt><dd><p>“requests_total”: 123456,
“requests_per_second”: 15.5,
“error_rate”: 0.02,
“average_response_time”: 150,
“p95_response_time”: 350,
“p99_response_time”: 800</p>
</dd>
</dl>
<p>}</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p><strong>API Usage Analytics</strong>
.. code-block:: http</p>
<blockquote>
<div><p>GET /api/v1/analytics/usage
Host: api.provchain-org.com
Authorization: Bearer YOUR_JWT_TOKEN
Content-Type: application/json</p>
<dl class="simple">
<dt>{</dt><dd><p>“start_date”: “2024-01-01”,
“end_date”: “2024-01-31”,
“granularity”: “day”</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p><strong>Response</strong>
.. code-block:: json</p>
<blockquote>
<div><dl>
<dt>{</dt><dd><dl>
<dt>“usage”: [</dt><dd><dl class="simple">
<dt>{</dt><dd><p>“date”: “2024-01-01”,
“requests”: 1234,
“errors”: 12,
“data_transferred_mb”: 45.6</p>
</dd>
</dl>
<p>},
{</p>
<blockquote>
<div><p>“date”: “2024-01-02”,
“requests”: 1456,
“errors”: 15,
“data_transferred_mb”: 52.3</p>
</div></blockquote>
<p>}</p>
</dd>
</dl>
<p>]</p>
</dd>
</dl>
<p>}</p>
</div></blockquote>
<p><strong>Performance Monitoring</strong>
.. code-block:: http</p>
<blockquote>
<div><p>GET /api/v1/metrics/performance
Host: api.provchain-org.com
Authorization: Bearer YOUR_JWT_TOKEN</p>
</div></blockquote>
<p><strong>Response</strong>
.. code-block:: json</p>
<blockquote>
<div><dl class="simple">
<dt>{</dt><dd><dl class="simple">
<dt>“performance”: {</dt><dd><dl class="simple">
<dt>“endpoints”: {</dt><dd><dl class="simple">
<dt>“/api/v1/blocks”: {</dt><dd><p>“avg_response_time”: 120,
“p95_response_time”: 250,
“p99_response_time”: 500</p>
</dd>
</dl>
</dd>
</dl>
</dd>
</dl>
</dd>
</dl>
</div></blockquote>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>