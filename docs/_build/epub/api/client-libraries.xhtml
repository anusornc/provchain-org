<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />

    <title>Client Libraries</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css?v=8e8a900e" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css?v=1d6d279e" />
    <link rel="stylesheet" type="text/css" href="../_static/copybutton.css?v=76b2166b" />
    <link rel="stylesheet" type="text/css" href="../_static/custom.css?v=3afbad45" />
    <link rel="stylesheet" type="text/css" href="../_static/interactive.css?v=267755d7" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="client-libraries">
<h1>Client Libraries</h1>
<p>Official and community-maintained client libraries for integrating with ProvChainOrg APIs in multiple programming languages.</p>
<div class="hero-section">
  <div class="hero-content">
    <h1>Client Libraries</h1>
    <p class="hero-subtitle">Ready-to-use libraries for integrating ProvChainOrg into your applications</p>
    <div class="hero-badges">
      <span class="badge badge-api">API</span>
      <span class="badge badge-integration">Integration</span>
      <span class="badge badge-sdks">SDKs</span>
      <span class="badge badge-languages">Languages</span>
    </div>
  </div>
</div><section id="overview">
<h2>Overview</h2>
<p>ProvChainOrg provides official client libraries for the most popular programming languages, along with comprehensive documentation and examples. These libraries handle authentication, request signing, error handling, and other common tasks to make integration as simple as possible.</p>
<p><strong>Supported Languages:</strong>
- <strong>Python</strong>: Official Python SDK with full feature support
- <strong>JavaScript/TypeScript</strong>: Official Node.js and browser libraries
- <strong>Rust</strong>: Official Rust crate with native performance
- <strong>Java</strong>: Official Java SDK for enterprise applications
- <strong>Go</strong>: Official Go module for cloud-native applications
- <strong>C#</strong>: Official .NET library for Windows and cross-platform applications</p>
<p><strong>Community Libraries:</strong>
- <strong>PHP</strong>: Community-maintained library
- <strong>Ruby</strong>: Community-maintained library
- <strong>Swift</strong>: Community-maintained iOS library
- <strong>Kotlin</strong>: Community-maintained Android library</p>
</section>
<section id="installation">
<h2>Installation</h2>
<section id="python-sdk">
<h3>Python SDK</h3>
<p>Install the official Python SDK:</p>
<div class="highlight-bash notranslate"><div class="highlight"><pre><span></span>pip<span class="w"> </span>install<span class="w"> </span>provchain-sdk
</pre></div>
</div>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="kn">from</span><span class="w"> </span><span class="nn">provchain</span><span class="w"> </span><span class="kn">import</span> <span class="n">ProvChainClient</span>

<span class="c1"># Initialize client</span>
<span class="n">client</span> <span class="o">=</span> <span class="n">ProvChainClient</span><span class="p">(</span>
    <span class="n">base_url</span><span class="o">=</span><span class="s2">&quot;https://api.provchain-org.com&quot;</span><span class="p">,</span>
    <span class="n">api_key</span><span class="o">=</span><span class="s2">&quot;YOUR_API_KEY&quot;</span>
<span class="p">)</span>

<span class="c1"># Get blockchain status</span>
<span class="n">status</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">get_status</span><span class="p">()</span>
<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Current block height: </span><span class="si">{</span><span class="n">status</span><span class="p">[</span><span class="s1">&#39;blockchain&#39;</span><span class="p">][</span><span class="s1">&#39;current_height&#39;</span><span class="p">]</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>

<span class="c1"># Add RDF data</span>
<span class="n">rdf_data</span> <span class="o">=</span> <span class="s2">&quot;&quot;&quot;</span>
<span class="s2">@prefix : &lt;http://example.org/supply-chain#&gt; .</span>
<span class="s2">:Batch001 a :ProductBatch ;</span>
<span class="s2">    :hasBatchID &quot;TEST-001&quot; ;</span>
<span class="s2">    :product :OrganicTomatoes .</span>
<span class="s2">&quot;&quot;&quot;</span>

<span class="n">result</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">add_rdf_data</span><span class="p">(</span><span class="n">rdf_data</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Added block </span><span class="si">{</span><span class="n">result</span><span class="p">[</span><span class="s1">&#39;block_index&#39;</span><span class="p">]</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</pre></div>
</div>
</section>
<section id="javascript-typescript-sdk">
<h3>JavaScript/TypeScript SDK</h3>
<p>Install the official JavaScript SDK:</p>
<div class="highlight-bash notranslate"><div class="highlight"><pre><span></span>npm<span class="w"> </span>install<span class="w"> </span>@provchain/sdk
</pre></div>
</div>
<div class="highlight-javascript notranslate"><div class="highlight"><pre><span></span><span class="k">import</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nx">ProvChainClient</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="kr">from</span><span class="w"> </span><span class="s1">&#39;@provchain/sdk&#39;</span><span class="p">;</span>

<span class="c1">// Initialize client</span>
<span class="kd">const</span><span class="w"> </span><span class="nx">client</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="ow">new</span><span class="w"> </span><span class="nx">ProvChainClient</span><span class="p">({</span>
<span class="w">    </span><span class="nx">baseUrl</span><span class="o">:</span><span class="w"> </span><span class="s1">&#39;https://api.provchain-org.com&#39;</span><span class="p">,</span>
<span class="w">    </span><span class="nx">apiKey</span><span class="o">:</span><span class="w"> </span><span class="s1">&#39;YOUR_API_KEY&#39;</span>
<span class="p">});</span>

<span class="c1">// Get blockchain status</span>
<span class="nx">client</span><span class="p">.</span><span class="nx">getStatus</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">status</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`Current block height: </span><span class="si">${</span><span class="nx">status</span><span class="p">.</span><span class="nx">blockchain</span><span class="p">.</span><span class="nx">current_height</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>
<span class="p">});</span>

<span class="c1">// Add RDF data</span>
<span class="kd">const</span><span class="w"> </span><span class="nx">rdfData</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="sb">`</span>
<span class="sb">@prefix : &lt;http://example.org/supply-chain#&gt; .</span>
<span class="sb">:Batch001 a :ProductBatch ;</span>
<span class="sb">    :hasBatchID &quot;TEST-001&quot; ;</span>
<span class="sb">    :product :OrganicTomatoes .</span>
<span class="sb">`</span><span class="p">;</span>

<span class="nx">client</span><span class="p">.</span><span class="nx">addRdfData</span><span class="p">(</span><span class="nx">rdfData</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">result</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`Added block </span><span class="si">${</span><span class="nx">result</span><span class="p">.</span><span class="nx">block_index</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>
<span class="p">});</span>
</pre></div>
</div>
</section>
<section id="rust-crate">
<h3>Rust Crate</h3>
<p>Add to your Cargo.toml:</p>
<div class="highlight-toml notranslate"><div class="highlight"><pre><span></span><span class="k">[dependencies]</span>
<span class="n">provchain-sdk</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">&quot;0.1.0&quot;</span>
</pre></div>
</div>
<div class="highlight-rust notranslate"><div class="highlight"><pre><span></span><span class="k">use</span><span class="w"> </span><span class="n">provchain_sdk</span><span class="p">::{</span><span class="n">ProvChainClient</span><span class="p">,</span><span class="w"> </span><span class="n">Config</span><span class="p">};</span>

<span class="cp">#[tokio::main]</span>
<span class="k">async</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">-&gt;</span><span class="w"> </span><span class="nb">Result</span><span class="o">&lt;</span><span class="p">(),</span><span class="w"> </span><span class="nb">Box</span><span class="o">&lt;</span><span class="k">dyn</span><span class="w"> </span><span class="n">std</span><span class="p">::</span><span class="n">error</span><span class="p">::</span><span class="n">Error</span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="c1">// Initialize client</span>
<span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">config</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Config</span><span class="p">::</span><span class="n">new</span><span class="p">(</span><span class="s">&quot;https://api.provchain-org.com&quot;</span><span class="p">)</span>
<span class="w">        </span><span class="p">.</span><span class="n">with_api_key</span><span class="p">(</span><span class="s">&quot;YOUR_API_KEY&quot;</span><span class="p">);</span>
<span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">client</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ProvChainClient</span><span class="p">::</span><span class="n">new</span><span class="p">(</span><span class="n">config</span><span class="p">);</span>

<span class="w">    </span><span class="c1">// Get blockchain status</span>
<span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">status</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">client</span><span class="p">.</span><span class="n">get_status</span><span class="p">().</span><span class="k">await</span><span class="o">?</span><span class="p">;</span>
<span class="w">    </span><span class="fm">println!</span><span class="p">(</span><span class="s">&quot;Current block height: {}&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">status</span><span class="p">.</span><span class="n">blockchain</span><span class="p">.</span><span class="n">current_height</span><span class="p">);</span>

<span class="w">    </span><span class="c1">// Add RDF data</span>
<span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">rdf_data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">r#&quot;</span>
<span class="s">    @prefix : &lt;http://example.org/supply-chain#&gt; .</span>
<span class="s">    :Batch001 a :ProductBatch ;</span>
<span class="s">        :hasBatchID &quot;TEST-001&quot; ;</span>
<span class="s">        :product :OrganicTomatoes .</span>
<span class="s">    &quot;#</span><span class="p">;</span>

<span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">client</span><span class="p">.</span><span class="n">add_rdf_data</span><span class="p">(</span><span class="n">rdf_data</span><span class="p">).</span><span class="k">await</span><span class="o">?</span><span class="p">;</span>
<span class="w">    </span><span class="fm">println!</span><span class="p">(</span><span class="s">&quot;Added block {}&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">result</span><span class="p">.</span><span class="n">block_index</span><span class="p">);</span>

<span class="w">    </span><span class="nb">Ok</span><span class="p">(())</span>
<span class="p">}</span>
</pre></div>
</div>
</section>
<section id="java-sdk">
<h3>Java SDK</h3>
<p>Add to your pom.xml:</p>
<div class="highlight-xml notranslate"><div class="highlight"><pre><span></span><span class="nt">&lt;dependency&gt;</span>
<span class="w">    </span><span class="nt">&lt;groupId&gt;</span>org.provchain<span class="nt">&lt;/groupId&gt;</span>
<span class="w">    </span><span class="nt">&lt;artifactId&gt;</span>provchain-sdk<span class="nt">&lt;/artifactId&gt;</span>
<span class="w">    </span><span class="nt">&lt;version&gt;</span>0.1.0<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</pre></div>
</div>
<div class="highlight-java notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span><span class="w"> </span><span class="nn">org.provchain.sdk.ProvChainClient</span><span class="p">;</span>
<span class="kn">import</span><span class="w"> </span><span class="nn">org.provchain.sdk.Config</span><span class="p">;</span>
<span class="kn">import</span><span class="w"> </span><span class="nn">org.provchain.sdk.models.StatusResponse</span><span class="p">;</span>

<span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">Example</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">main</span><span class="p">(</span><span class="n">String</span><span class="o">[]</span><span class="w"> </span><span class="n">args</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="c1">// Initialize client</span>
<span class="w">        </span><span class="n">Config</span><span class="w"> </span><span class="n">config</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">Config</span><span class="p">(</span><span class="s">&quot;https://api.provchain-org.com&quot;</span><span class="p">)</span>
<span class="w">            </span><span class="p">.</span><span class="na">withApiKey</span><span class="p">(</span><span class="s">&quot;YOUR_API_KEY&quot;</span><span class="p">);</span>
<span class="w">        </span><span class="n">ProvChainClient</span><span class="w"> </span><span class="n">client</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ProvChainClient</span><span class="p">(</span><span class="n">config</span><span class="p">);</span>

<span class="w">        </span><span class="k">try</span><span class="w"> </span><span class="p">{</span>
<span class="w">            </span><span class="c1">// Get blockchain status</span>
<span class="w">            </span><span class="n">StatusResponse</span><span class="w"> </span><span class="n">status</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">client</span><span class="p">.</span><span class="na">getStatus</span><span class="p">();</span>
<span class="w">            </span><span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="s">&quot;Current block height: &quot;</span><span class="w"> </span><span class="o">+</span>
<span class="w">                </span><span class="n">status</span><span class="p">.</span><span class="na">getBlockchain</span><span class="p">().</span><span class="na">getCurrentHeight</span><span class="p">());</span>

<span class="w">            </span><span class="c1">// Add RDF data</span>
<span class="w">            </span><span class="n">String</span><span class="w"> </span><span class="n">rdfData</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&quot;&quot;&quot;</span>
<span class="s">            @prefix : &lt;http://example.org/supply-chain#&gt; .</span>
<span class="s">            :Batch001 a :ProductBatch ;</span>
<span class="s">                :hasBatchID &quot;TEST-001&quot; ;</span>
<span class="s">                :product :OrganicTomatoes .</span>
<span class="s">            &quot;&quot;&quot;</span><span class="p">;</span>

<span class="w">            </span><span class="kd">var</span><span class="w"> </span><span class="n">result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">client</span><span class="p">.</span><span class="na">addRdfData</span><span class="p">(</span><span class="n">rdfData</span><span class="p">);</span>
<span class="w">            </span><span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="s">&quot;Added block &quot;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">result</span><span class="p">.</span><span class="na">getBlockIndex</span><span class="p">());</span>

<span class="w">        </span><span class="p">}</span><span class="w"> </span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">Exception</span><span class="w"> </span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">            </span><span class="n">e</span><span class="p">.</span><span class="na">printStackTrace</span><span class="p">();</span>
<span class="w">        </span><span class="p">}</span>
<span class="w">    </span><span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
</section>
<section id="go-module">
<h3>Go Module</h3>
<div class="highlight-bash notranslate"><div class="highlight"><pre><span></span>go<span class="w"> </span>get<span class="w"> </span>github.com/provchain-org/provchain-sdk-go
</pre></div>
</div>
<div class="highlight-go notranslate"><div class="highlight"><pre><span></span><span class="kn">package</span><span class="w"> </span><span class="nx">main</span>

<span class="kn">import</span><span class="w"> </span><span class="p">(</span>
<span class="w">    </span><span class="s">&quot;fmt&quot;</span>
<span class="w">    </span><span class="s">&quot;log&quot;</span>
<span class="w">    </span><span class="s">&quot;github.com/provchain-org/provchain-sdk-go/client&quot;</span>
<span class="w">    </span><span class="s">&quot;github.com/provchain-org/provchain-sdk-go/config&quot;</span>
<span class="p">)</span>

<span class="kd">func</span><span class="w"> </span><span class="nx">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="c1">// Initialize client</span>
<span class="w">    </span><span class="nx">cfg</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="nx">config</span><span class="p">.</span><span class="nx">NewConfig</span><span class="p">(</span><span class="s">&quot;https://api.provchain-org.com&quot;</span><span class="p">)</span>
<span class="w">    </span><span class="nx">cfg</span><span class="p">.</span><span class="nx">SetAPIKey</span><span class="p">(</span><span class="s">&quot;YOUR_API_KEY&quot;</span><span class="p">)</span>
<span class="w">    </span><span class="nx">client</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="nx">client</span><span class="p">.</span><span class="nx">NewClient</span><span class="p">(</span><span class="nx">cfg</span><span class="p">)</span>

<span class="w">    </span><span class="c1">// Get blockchain status</span>
<span class="w">    </span><span class="nx">status</span><span class="p">,</span><span class="w"> </span><span class="nx">err</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="nx">client</span><span class="p">.</span><span class="nx">GetStatus</span><span class="p">()</span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="nx">err</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">nil</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
<span class="w">    </span><span class="p">}</span>
<span class="w">    </span><span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Current block height: %d\n&quot;</span><span class="p">,</span><span class="w"> </span><span class="nx">status</span><span class="p">.</span><span class="nx">Blockchain</span><span class="p">.</span><span class="nx">CurrentHeight</span><span class="p">)</span>

<span class="w">    </span><span class="c1">// Add RDF data</span>
<span class="w">    </span><span class="nx">rdfData</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="s">`</span>
<span class="s">    @prefix : &lt;http://example.org/supply-chain#&gt; .</span>
<span class="s">    :Batch001 a :ProductBatch ;</span>
<span class="s">        :hasBatchID &quot;TEST-001&quot; ;</span>
<span class="s">        :product :OrganicTomatoes .</span>
<span class="s">    `</span>

<span class="w">    </span><span class="nx">result</span><span class="p">,</span><span class="w"> </span><span class="nx">err</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="nx">client</span><span class="p">.</span><span class="nx">AddRdfData</span><span class="p">(</span><span class="nx">rdfData</span><span class="p">)</span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="nx">err</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">nil</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
<span class="w">    </span><span class="p">}</span>
<span class="w">    </span><span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Added block %d\n&quot;</span><span class="p">,</span><span class="w"> </span><span class="nx">result</span><span class="p">.</span><span class="nx">BlockIndex</span><span class="p">)</span>
<span class="p">}</span>
</pre></div>
</div>
</section>
<section id="c-library">
<h3>C# Library</h3>
<div class="highlight-bash notranslate"><div class="highlight"><pre><span></span>dotnet<span class="w"> </span>add<span class="w"> </span>package<span class="w"> </span>ProvChain.SDK
</pre></div>
</div>
<div class="highlight-csharp notranslate"><div class="highlight"><pre><span></span><span class="k">using</span><span class="w"> </span><span class="nn">ProvChain.SDK</span><span class="p">;</span>
<span class="k">using</span><span class="w"> </span><span class="nn">ProvChain.SDK.Models</span><span class="p">;</span>

<span class="k">class</span><span class="w"> </span><span class="nc">Program</span>
<span class="p">{</span>
<span class="w">    </span><span class="k">static</span><span class="w"> </span><span class="k">async</span><span class="w"> </span><span class="n">Task</span><span class="w"> </span><span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span><span class="w"> </span><span class="n">args</span><span class="p">)</span>
<span class="w">    </span><span class="p">{</span>
<span class="w">        </span><span class="c1">// Initialize client</span>
<span class="w">        </span><span class="kt">var</span><span class="w"> </span><span class="n">config</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">Config</span>
<span class="w">        </span><span class="p">{</span>
<span class="w">            </span><span class="n">BaseUrl</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&quot;https://api.provchain-org.com&quot;</span><span class="p">,</span>
<span class="w">            </span><span class="n">ApiKey</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&quot;YOUR_API_KEY&quot;</span>
<span class="w">        </span><span class="p">};</span>
<span class="w">        </span><span class="kt">var</span><span class="w"> </span><span class="n">client</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ProvChainClient</span><span class="p">(</span><span class="n">config</span><span class="p">);</span>

<span class="w">        </span><span class="k">try</span>
<span class="w">        </span><span class="p">{</span>
<span class="w">            </span><span class="c1">// Get blockchain status</span>
<span class="w">            </span><span class="kt">var</span><span class="w"> </span><span class="n">status</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">await</span><span class="w"> </span><span class="n">client</span><span class="p">.</span><span class="n">GetStatusAsync</span><span class="p">();</span>
<span class="w">            </span><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">$&quot;Current block height: {status.Blockchain.CurrentHeight}&quot;</span><span class="p">);</span>

<span class="w">            </span><span class="c1">// Add RDF data</span>
<span class="w">            </span><span class="kt">var</span><span class="w"> </span><span class="n">rdfData</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">@&quot;</span>
<span class="s">            @prefix : &lt;http://example.org/supply-chain#&gt; .</span>
<span class="s">            :Batch001 a :ProductBatch ;</span>
<span class="s">                :hasBatchID &quot;&quot;TEST-001&quot;&quot; ;</span>
<span class="s">                :product :OrganicTomatoes .</span>
<span class="s">            &quot;</span><span class="p">;</span>

<span class="w">            </span><span class="kt">var</span><span class="w"> </span><span class="n">result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">await</span><span class="w"> </span><span class="n">client</span><span class="p">.</span><span class="n">AddRdfDataAsync</span><span class="p">(</span><span class="n">rdfData</span><span class="p">);</span>
<span class="w">            </span><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">$&quot;Added block {result.BlockIndex}&quot;</span><span class="p">);</span>
<span class="w">        </span><span class="p">}</span>
<span class="w">        </span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">Exception</span><span class="w"> </span><span class="n">ex</span><span class="p">)</span>
<span class="w">        </span><span class="p">{</span>
<span class="w">            </span><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">$&quot;Error: {ex.Message}&quot;</span><span class="p">);</span>
<span class="w">        </span><span class="p">}</span>
<span class="w">    </span><span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
</section>
</section>
<section id="authentication">
<h2>Authentication</h2>
<p>All client libraries support the same authentication methods as the REST API:</p>
<section id="api-key-authentication">
<h3>API Key Authentication</h3>
</section>
<section id="jwt-authentication">
<h3>JWT Authentication</h3>
</section>
<section id="certificate-authentication">
<h3>Certificate Authentication</h3>
</section>
</section>
<section id="core-features">
<h2>Core Features</h2>
<p>All client libraries provide consistent interfaces for core ProvChainOrg functionality:</p>
<section id="blockchain-status">
<h3>Blockchain Status</h3>
</section>
<section id="adding-rdf-data">
<h3>Adding RDF Data</h3>
</section>
<section id="sparql-queries">
<h3>SPARQL Queries</h3>
</section>
<section id="block-operations">
<h3>Block Operations</h3>
</section>
<section id="data-validation">
<h3>Data Validation</h3>
</section>
</section>
<section id="advanced-features">
<h2>Advanced Features</h2>
<section id="rate-limiting-handling">
<h3>Rate Limiting Handling</h3>
<p>All client libraries automatically handle rate limiting:</p>
</section>
<section id="error-handling">
<h3>Error Handling</h3>
<p>Comprehensive error handling with detailed error information:</p>
</section>
<section id="streaming-responses">
<h3>Streaming Responses</h3>
<p>For large query results, client libraries support streaming:</p>
</section>
<section id="async-operations">
<h3>Async Operations</h3>
<p>All client libraries support asynchronous operations where applicable:</p>
</section>
</section>
<section id="configuration-options">
<h2>Configuration Options</h2>
<p>Client libraries support extensive configuration options:</p>
</section>
<section id="logging-and-debugging">
<h2>Logging and Debugging</h2>
<p>Client libraries provide comprehensive logging for debugging:</p>
</section>
<section id="performance-optimization">
<h2>Performance Optimization</h2>
<p>Client libraries include performance optimizations:</p>
<section id="connection-pooling">
<h3>Connection Pooling</h3>
</section>
<section id="caching">
<h3>Caching</h3>
</section>
<section id="batch-operations">
<h3>Batch Operations</h3>
</section>
</section>
<section id="examples-and-tutorials">
<h2>Examples and Tutorials</h2>
<section id="supply-chain-tracking">
<h3>Supply Chain Tracking</h3>
</section>
<section id="environmental-monitoring">
<h3>Environmental Monitoring</h3>
</section>
<section id="quality-assurance">
<h3>Quality Assurance</h3>
</section>
</section>
<section id="best-practices">
<h2>Best Practices</h2>
<ol class="arabic simple">
<li><p><strong>Secure Credential Storage</strong>: Never hardcode API keys in source code</p></li>
<li><p><strong>Error Handling</strong>: Always implement proper error handling</p></li>
<li><p><strong>Rate Limiting</strong>: Respect API rate limits and implement backoff strategies</p></li>
<li><p><strong>Connection Management</strong>: Use connection pooling for better performance</p></li>
<li><p><strong>Logging</strong>: Enable appropriate logging levels for debugging</p></li>
<li><p><strong>Validation</strong>: Validate data before sending to the API</p></li>
<li><p><strong>Caching</strong>: Use caching for frequently accessed data</p></li>
<li><p><strong>Monitoring</strong>: Monitor API usage and performance metrics</p></li>
</ol>
</section>
<section id="troubleshooting">
<h2>Troubleshooting</h2>
<section id="common-issues">
<h3>Common Issues</h3>
<p><strong>Connection Timeouts</strong>
- Increase timeout values in client configuration
- Check network connectivity to the API endpoint
- Verify firewall settings</p>
<p><strong>Authentication Errors</strong>
- Verify API key validity and format
- Check that the key has appropriate permissions
- Ensure proper authentication method is being used</p>
<p><strong>Rate Limiting</strong>
- Implement exponential backoff strategies
- Use appropriate authentication methods for higher limits
- Consider batching operations to reduce request count</p>
<p><strong>Data Validation Errors</strong>
- Validate RDF syntax before sending
- Check ontology compliance
- Ensure all required properties are present</p>
<p><strong>SSL/TLS Issues</strong>
- Update certificates and CA bundles
- Verify certificate chain validity
- Check for certificate expiration</p>
</section>
</section>
<section id="getting-help">
<h2>Getting Help</h2>
<p>For issues with client libraries:</p>
<ol class="arabic simple">
<li><p><strong>Check Documentation</strong>: Review this documentation and API references</p></li>
<li><p><strong>Review Examples</strong>: Look at provided examples for common patterns</p></li>
<li><p><strong>Check GitHub Issues</strong>: Search existing issues or report new ones</p></li>
<li><p><strong>Community Support</strong>: Join community discussions for help</p></li>
<li><p><strong>Enterprise Support</strong>: Contact support for commercial assistance</p></li>
</ol>
<p><strong>Resources:</strong>
- <strong>GitHub Repositories</strong>: Source code and issue tracking
- <strong>API Documentation</strong>: Complete API reference
- <strong>Community Forum</strong>: Peer support and best practices
- <strong>Example Projects</strong>: Complete working examples</p>
<div class="footer-note">
  <p><strong>Ready to integrate?</strong> Check out our <a href="https://github.com/provchain-org">GitHub repositories</a> for complete examples or dive into the <a href="rest-api.html">REST API documentation</a> for detailed endpoint information.</p>
</div></section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>