<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />

    <title>Introduction to the ProvChainOrg Stack</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css?v=8e8a900e" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css?v=1d6d279e" />
    <link rel="stylesheet" type="text/css" href="../_static/copybutton.css?v=76b2166b" />
    <link rel="stylesheet" type="text/css" href="../_static/custom.css?v=3afbad45" />
    <link rel="stylesheet" type="text/css" href="../_static/interactive.css?v=267755d7" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="introduction-to-the-provchainorg-stack">
<h1>Introduction to the ProvChainOrg Stack</h1>
<p>The ProvChainOrg stack is a comprehensive set of tools, libraries, and technologies that enable developers to build semantic blockchain applications for supply chain traceability. This page provides an overview of the entire development ecosystem.</p>
<section id="stack-overview">
<h2>Stack Overview</h2>
<p>The ProvChainOrg stack consists of several layers, each providing specific functionality:</p>
<div class="highlight-text notranslate"><div class="highlight"><pre><span></span>┌─────────────────────────────────────────────────────────────┐
│                    Application Layer                        │
│  ┌─────────────┐  ┌─────────────┐  ┌─────────────────────┐ │
│  │ Web Apps    │  │ Mobile Apps │  │ Desktop Apps        │ │
│  └─────────────┘  └─────────────┘  └─────────────────────┘ │
└─────────────────────────────────────────────────────────────┘
┌─────────────────────────────────────────────────────────────┐
│                      API Layer                              │
│  ┌─────────────┐  ┌─────────────┐  ┌─────────────────────┐ │
│  │ REST API    │  │ SPARQL API  │  │ WebSocket API       │ │
│  └─────────────┘  └─────────────┘  └─────────────────────┘ │
└─────────────────────────────────────────────────────────────┘
┌─────────────────────────────────────────────────────────────┐
│                   Core Blockchain Layer                     │
│  ┌─────────────┐  ┌─────────────┐  ┌─────────────────────┐ │
│  │ RDF Engine  │  │ Consensus   │  │ Canonicalization    │ │
│  └─────────────┘  └─────────────┘  └─────────────────────┘ │
└─────────────────────────────────────────────────────────────┘
┌─────────────────────────────────────────────────────────────┐
│                    Storage Layer                            │
│  ┌─────────────┐  ┌─────────────┐  ┌─────────────────────┐ │
│  │ RDF Store   │  │ Block Store │  │ Network State       │ │
│  └─────────────┘  └─────────────┘  └─────────────────────┘ │
└─────────────────────────────────────────────────────────────┘
</pre></div>
</div>
</section>
<section id="core-technologies">
<h2>Core Technologies</h2>
<section id="programming-language-rust">
<h3>Programming Language: Rust</h3>
<p>ProvChainOrg is built with <strong>Rust</strong> for several key reasons:</p>
<table class="docutils align-default">
<colgroup>
<col style="width: 30.0%" />
<col style="width: 70.0%" />
</colgroup>
<thead>
<tr class="row-odd"><th class="head"><p>Feature</p></th>
<th class="head"><p>Benefit</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p>Memory Safety</p></td>
<td><p>Zero-cost abstractions with compile-time guarantees</p></td>
</tr>
<tr class="row-odd"><td><p>Performance</p></td>
<td><p>Native performance comparable to C/C++</p></td>
</tr>
<tr class="row-even"><td><p>Concurrency</p></td>
<td><p>Fearless concurrency with async/await support</p></td>
</tr>
<tr class="row-odd"><td><p>Type Safety</p></td>
<td><p>Strong typing prevents runtime errors</p></td>
</tr>
<tr class="row-even"><td><p>Ecosystem</p></td>
<td><p>Rich crate ecosystem for blockchain and RDF</p></td>
</tr>
</tbody>
</table>
</section>
<section id="rdf-storage-oxigraph">
<h3>RDF Storage: Oxigraph</h3>
<p><strong>Oxigraph</strong> provides the semantic data foundation:</p>
<ul class="simple">
<li><p><strong>SPARQL 1.1 Compliance</strong>: Full query and update support</p></li>
<li><p><strong>High Performance</strong>: Optimized for large-scale RDF data</p></li>
<li><p><strong>Standards Compliance</strong>: W3C RDF and SPARQL standards</p></li>
<li><p><strong>Multiple Formats</strong>: Turtle, N-Triples, JSON-LD, RDF/XML</p></li>
</ul>
<div class="highlight-rust notranslate"><div class="highlight"><pre><span></span><span class="k">use</span><span class="w"> </span><span class="n">oxigraph</span><span class="p">::</span><span class="n">store</span><span class="p">::</span><span class="n">Store</span><span class="p">;</span>
<span class="k">use</span><span class="w"> </span><span class="n">oxigraph</span><span class="p">::</span><span class="n">sparql</span><span class="p">::</span><span class="n">QueryResults</span><span class="p">;</span>

<span class="c1">// Create RDF store</span>
<span class="kd">let</span><span class="w"> </span><span class="n">store</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Store</span><span class="p">::</span><span class="n">new</span><span class="p">()</span><span class="o">?</span><span class="p">;</span>

<span class="c1">// Load RDF data</span>
<span class="n">store</span><span class="p">.</span><span class="n">load_graph</span><span class="p">(</span><span class="n">rdf_data</span><span class="p">,</span><span class="w"> </span><span class="n">GraphFormat</span><span class="p">::</span><span class="n">Turtle</span><span class="p">,</span><span class="w"> </span><span class="nb">None</span><span class="p">,</span><span class="w"> </span><span class="nb">None</span><span class="p">)</span><span class="o">?</span><span class="p">;</span>

<span class="c1">// Execute SPARQL query</span>
<span class="kd">let</span><span class="w"> </span><span class="n">results</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">store</span><span class="p">.</span><span class="n">query</span><span class="p">(</span><span class="s">&quot;SELECT * WHERE { ?s ?p ?o }&quot;</span><span class="p">)</span><span class="o">?</span><span class="p">;</span>
</pre></div>
</div>
</section>
<section id="networking-tokio-websockets">
<h3>Networking: Tokio + WebSockets</h3>
<p><strong>Asynchronous networking</strong> for distributed blockchain:</p>
<ul class="simple">
<li><p><strong>Tokio Runtime</strong>: High-performance async runtime</p></li>
<li><p><strong>WebSocket Protocol</strong>: Real-time peer communication</p></li>
<li><p><strong>Connection Pooling</strong>: Efficient resource management</p></li>
<li><p><strong>Message Serialization</strong>: Efficient binary protocols</p></li>
</ul>
<div class="highlight-rust notranslate"><div class="highlight"><pre><span></span><span class="k">use</span><span class="w"> </span><span class="n">tokio_tungstenite</span><span class="p">::{</span><span class="n">connect_async</span><span class="p">,</span><span class="w"> </span><span class="n">tungstenite</span><span class="p">::</span><span class="n">Message</span><span class="p">};</span>

<span class="c1">// Connect to peer</span>
<span class="kd">let</span><span class="w"> </span><span class="p">(</span><span class="n">ws_stream</span><span class="p">,</span><span class="w"> </span><span class="n">_</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">connect_async</span><span class="p">(</span><span class="s">&quot;ws://peer.example.com&quot;</span><span class="p">).</span><span class="k">await</span><span class="o">?</span><span class="p">;</span>

<span class="c1">// Send blockchain message</span>
<span class="n">ws_stream</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">Message</span><span class="p">::</span><span class="n">Binary</span><span class="p">(</span><span class="n">block_data</span><span class="p">)).</span><span class="k">await</span><span class="o">?</span><span class="p">;</span>
</pre></div>
</div>
</section>
</section>
<section id="development-tools">
<h2>Development Tools</h2>
<section id="command-line-interface">
<h3>Command Line Interface</h3>
<p>The <cite>provchain</cite> CLI provides comprehensive blockchain management:</p>
<div class="highlight-bash notranslate"><div class="highlight"><pre><span></span><span class="c1"># Initialize new blockchain</span>
provchain<span class="w"> </span>init<span class="w"> </span>--config<span class="w"> </span>config.toml

<span class="c1"># Add supply chain data</span>
provchain<span class="w"> </span>add-file<span class="w"> </span>supply_chain_data.ttl

<span class="c1"># Query blockchain</span>
provchain<span class="w"> </span>query<span class="w"> </span>trace_products.sparql

<span class="c1"># Start network node</span>
provchain<span class="w"> </span>network<span class="w"> </span>--port<span class="w"> </span><span class="m">8080</span>

<span class="c1"># Validate blockchain integrity</span>
provchain<span class="w"> </span>validate
</pre></div>
</div>
</section>
<section id="web-development-framework">
<h3>Web Development Framework</h3>
<p><strong>Axum</strong> web framework for REST APIs:</p>
<div class="highlight-rust notranslate"><div class="highlight"><pre><span></span><span class="k">use</span><span class="w"> </span><span class="n">axum</span><span class="p">::{</span><span class="n">routing</span><span class="p">::</span><span class="n">get</span><span class="p">,</span><span class="w"> </span><span class="n">Router</span><span class="p">,</span><span class="w"> </span><span class="n">Json</span><span class="p">};</span>

<span class="c1">// Define API routes</span>
<span class="kd">let</span><span class="w"> </span><span class="n">app</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Router</span><span class="p">::</span><span class="n">new</span><span class="p">()</span>
<span class="w">    </span><span class="p">.</span><span class="n">route</span><span class="p">(</span><span class="s">&quot;/api/blocks&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">get</span><span class="p">(</span><span class="n">get_blocks</span><span class="p">))</span>
<span class="w">    </span><span class="p">.</span><span class="n">route</span><span class="p">(</span><span class="s">&quot;/api/query&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">post</span><span class="p">(</span><span class="n">execute_sparql</span><span class="p">))</span>
<span class="w">    </span><span class="p">.</span><span class="n">route</span><span class="p">(</span><span class="s">&quot;/api/supply-chain/:id&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">get</span><span class="p">(</span><span class="n">get_supply_chain</span><span class="p">));</span>

<span class="c1">// Start server</span>
<span class="n">axum</span><span class="p">::</span><span class="n">Server</span><span class="p">::</span><span class="n">bind</span><span class="p">(</span><span class="o">&amp;</span><span class="s">&quot;0.0.0.0:8080&quot;</span><span class="p">.</span><span class="n">parse</span><span class="p">()</span><span class="o">?</span><span class="p">)</span>
<span class="w">    </span><span class="p">.</span><span class="n">serve</span><span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">into_make_service</span><span class="p">())</span>
<span class="w">    </span><span class="p">.</span><span class="k">await</span><span class="o">?</span><span class="p">;</span>
</pre></div>
</div>
</section>
<section id="configuration-management">
<h3>Configuration Management</h3>
<p><strong>TOML-based configuration</strong> with environment variable support:</p>
<div class="highlight-toml notranslate"><div class="highlight"><pre><span></span><span class="c1"># config.toml</span>
<span class="k">[blockchain]</span>
<span class="n">genesis_block</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">&quot;genesis.ttl&quot;</span>
<span class="n">block_time</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">10</span><span class="w">  </span><span class="c1"># seconds</span>

<span class="k">[network]</span>
<span class="n">listen_port</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">8080</span>
<span class="n">bootstrap_peers</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="s2">&quot;ws://peer1.example.com&quot;</span><span class="p">,</span><span class="w"> </span><span class="s2">&quot;ws://peer2.example.com&quot;</span><span class="p">]</span>

<span class="k">[storage]</span>
<span class="n">data_dir</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">&quot;./data&quot;</span>
<span class="n">cache_size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">&quot;1GB&quot;</span>

<span class="k">[ontology]</span>
<span class="n">schema_file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">&quot;ontology/traceability.owl.ttl&quot;</span>
<span class="n">validation_enabled</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">true</span>
</pre></div>
</div>
</section>
</section>
<section id="apis-and-interfaces">
<h2>APIs and Interfaces</h2>
<section id="rest-api">
<h3>REST API</h3>
<p>Standard HTTP REST API for web applications:</p>
<div class="highlight-http notranslate"><div class="highlight"><pre><span></span><span class="err"># Get blockchain status</span>
<span class="err">GET /api/status</span>

<span class="err"># Add new supply chain data</span>
<span class="err">POST /api/data</span>
<span class="err">Content-Type: text/turtle</span>

<span class="err"># Query supply chain</span>
<span class="err">POST /api/query</span>
<span class="err">Content-Type: application/sparql-query</span>
</pre></div>
</div>
</section>
<section id="sparql-endpoint">
<h3>SPARQL Endpoint</h3>
<p>W3C-compliant SPARQL endpoint:</p>
<div class="highlight-http notranslate"><div class="highlight"><pre><span></span><span class="err"># SPARQL query endpoint</span>
<span class="err">POST /sparql</span>
<span class="err">Content-Type: application/sparql-query</span>

<span class="err">SELECT ?batch ?product ?farm WHERE {</span>
<span class="err">  ?batch a :ProductBatch ;</span>
<span class="err">         :product ?product ;</span>
<span class="err">         :originFarm ?farm .</span>
<span class="err">}</span>
</pre></div>
</div>
</section>
<section id="websocket-api">
<h3>WebSocket API</h3>
<p>Real-time updates and peer communication:</p>
<div class="highlight-javascript notranslate"><div class="highlight"><pre><span></span><span class="c1">// Connect to WebSocket</span>
<span class="kd">const</span><span class="w"> </span><span class="nx">ws</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="ow">new</span><span class="w"> </span><span class="nx">WebSocket</span><span class="p">(</span><span class="s1">&#39;ws://localhost:8080/ws&#39;</span><span class="p">);</span>

<span class="c1">// Listen for blockchain updates</span>
<span class="nx">ws</span><span class="p">.</span><span class="nx">onmessage</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="nx">event</span><span class="p">)</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="p">{</span>
<span class="w">  </span><span class="kd">const</span><span class="w"> </span><span class="nx">update</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
<span class="w">  </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="nx">update</span><span class="p">.</span><span class="nx">type</span><span class="w"> </span><span class="o">===</span><span class="w"> </span><span class="s1">&#39;new_block&#39;</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;New block:&#39;</span><span class="p">,</span><span class="w"> </span><span class="nx">update</span><span class="p">.</span><span class="nx">block</span><span class="p">);</span>
<span class="w">  </span><span class="p">}</span>
<span class="p">};</span>
</pre></div>
</div>
</section>
</section>
<section id="development-frameworks">
<h2>Development Frameworks</h2>
<section id="smart-ontologies">
<h3>Smart Ontologies</h3>
<p>ProvChainOrg’s equivalent to smart contracts - semantic validation rules:</p>
<div class="highlight-turtle notranslate"><div class="highlight"><pre><span></span><span class="c"># Define supply chain ontology</span>
<span class="p">:</span><span class="nt">ProductBatch</span> <span class="kt">a</span> <span class="nn">owl</span><span class="p">:</span><span class="nt">Class</span> <span class="p">;</span>
              <span class="nn">rdfs</span><span class="p">:</span><span class="nt">comment</span> <span class="s">&quot;A batch of products in the supply chain&quot;</span> <span class="p">.</span>

<span class="p">:</span><span class="nt">harvestDate</span> <span class="kt">a</span> <span class="nn">owl</span><span class="p">:</span><span class="nt">DatatypeProperty</span> <span class="p">;</span>
             <span class="nn">rdfs</span><span class="p">:</span><span class="nt">domain</span> <span class="p">:</span><span class="nt">ProductBatch</span> <span class="p">;</span>
             <span class="nn">rdfs</span><span class="p">:</span><span class="nt">range</span> <span class="nn">xsd</span><span class="p">:</span><span class="nt">date</span> <span class="p">;</span>
             <span class="nn">rdfs</span><span class="p">:</span><span class="nt">comment</span> <span class="s">&quot;Date when the product was harvested&quot;</span> <span class="p">.</span>

<span class="c"># Validation rules</span>
<span class="p">:</span><span class="nt">ProductBatch</span> <span class="nn">rdfs</span><span class="p">:</span><span class="nt">subClassOf</span> <span class="p">[</span>
    <span class="kt">a</span> <span class="nn">owl</span><span class="p">:</span><span class="nt">Restriction</span> <span class="p">;</span>
    <span class="nn">owl</span><span class="p">:</span><span class="nt">onProperty</span> <span class="p">:</span><span class="nt">harvestDate</span> <span class="p">;</span>
    <span class="nn">owl</span><span class="p">:</span><span class="nt">cardinality</span> <span class="mi">1</span>
<span class="p">]</span> <span class="p">.</span>
</pre></div>
</div>
</section>
<section id="testing-framework">
<h3>Testing Framework</h3>
<p>Comprehensive testing tools:</p>
<div class="highlight-rust notranslate"><div class="highlight"><pre><span></span><span class="cp">#[tokio::test]</span>
<span class="k">async</span><span class="w"> </span><span class="k">fn</span><span class="w"> </span><span class="nf">test_supply_chain_traceability</span><span class="p">()</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">blockchain</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Blockchain</span><span class="p">::</span><span class="n">new_test</span><span class="p">().</span><span class="k">await</span><span class="o">?</span><span class="p">;</span>

<span class="w">    </span><span class="c1">// Add supply chain data</span>
<span class="w">    </span><span class="n">blockchain</span><span class="p">.</span><span class="n">add_rdf_data</span><span class="p">(</span><span class="n">test_data</span><span class="p">).</span><span class="k">await</span><span class="o">?</span><span class="p">;</span>

<span class="w">    </span><span class="c1">// Query traceability</span>
<span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">results</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">blockchain</span><span class="p">.</span><span class="n">query</span><span class="p">(</span><span class="n">trace_query</span><span class="p">).</span><span class="k">await</span><span class="o">?</span><span class="p">;</span>

<span class="w">    </span><span class="c1">// Verify results</span>
<span class="w">    </span><span class="fm">assert_eq!</span><span class="p">(</span><span class="n">results</span><span class="p">.</span><span class="n">len</span><span class="p">(),</span><span class="w"> </span><span class="mi">3</span><span class="p">);</span>
<span class="w">    </span><span class="fm">assert!</span><span class="p">(</span><span class="n">results</span><span class="p">.</span><span class="n">contains_product</span><span class="p">(</span><span class="s">&quot;OrganicTomatoes&quot;</span><span class="p">));</span>
<span class="p">}</span>
</pre></div>
</div>
</section>
<section id="deployment-tools">
<h3>Deployment Tools</h3>
<p>Production deployment utilities:</p>
<div class="highlight-bash notranslate"><div class="highlight"><pre><span></span><span class="c1"># Docker deployment</span>
docker<span class="w"> </span>build<span class="w"> </span>-t<span class="w"> </span>provchain-org<span class="w"> </span>.
docker<span class="w"> </span>run<span class="w"> </span>-p<span class="w"> </span><span class="m">8080</span>:8080<span class="w"> </span>provchain-org

<span class="c1"># Kubernetes deployment</span>
kubectl<span class="w"> </span>apply<span class="w"> </span>-f<span class="w"> </span>k8s/provchain-deployment.yaml

<span class="c1"># Monitoring setup</span>
provchain<span class="w"> </span>monitor<span class="w"> </span>--prometheus<span class="w"> </span>--grafana
</pre></div>
</div>
</section>
</section>
<section id="language-bindings">
<h2>Language Bindings</h2>
<p>While ProvChainOrg core is written in Rust, we provide bindings for other languages:</p>
<section id="python">
<h3>Python</h3>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="kn">from</span><span class="w"> </span><span class="nn">provchain</span><span class="w"> </span><span class="kn">import</span> <span class="n">ProvChainClient</span>

<span class="c1"># Connect to ProvChainOrg node</span>
<span class="n">client</span> <span class="o">=</span> <span class="n">ProvChainClient</span><span class="p">(</span><span class="s2">&quot;http://localhost:8080&quot;</span><span class="p">)</span>

<span class="c1"># Add supply chain data</span>
<span class="n">client</span><span class="o">.</span><span class="n">add_rdf_file</span><span class="p">(</span><span class="s2">&quot;supply_chain.ttl&quot;</span><span class="p">)</span>

<span class="c1"># Query with SPARQL</span>
<span class="n">results</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="s2">&quot;&quot;&quot;</span>
<span class="s2">    SELECT ?batch ?product WHERE {</span>
<span class="s2">        ?batch a :ProductBatch ;</span>
<span class="s2">               :product ?product .</span>
<span class="s2">    }</span>
<span class="s2">&quot;&quot;&quot;</span><span class="p">)</span>
</pre></div>
</div>
</section>
<section id="javascript-typescript">
<h3>JavaScript/TypeScript</h3>
<div class="highlight-typescript notranslate"><div class="highlight"><pre><span></span><span class="k">import</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nx">ProvChainClient</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="kr">from</span><span class="w"> </span><span class="s1">&#39;@provchain/client&#39;</span><span class="p">;</span>

<span class="c1">// Initialize client</span>
<span class="kd">const</span><span class="w"> </span><span class="nx">client</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="ow">new</span><span class="w"> </span><span class="nx">ProvChainClient</span><span class="p">(</span><span class="s1">&#39;http://localhost:8080&#39;</span><span class="p">);</span>

<span class="c1">// Query supply chain</span>
<span class="kd">const</span><span class="w"> </span><span class="nx">results</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">await</span><span class="w"> </span><span class="nx">client</span><span class="p">.</span><span class="nx">sparqlQuery</span><span class="p">(</span><span class="sb">`</span>
<span class="sb">    SELECT ?batch ?farm WHERE {</span>
<span class="sb">        ?batch :originFarm ?farm .</span>
<span class="sb">    }</span>
<span class="sb">`</span><span class="p">);</span>
</pre></div>
</div>
</section>
</section>
<section id="development-workflow">
<h2>Development Workflow</h2>
<section id="local-development">
<h3>Local Development</h3>
<ol class="arabic simple">
<li><p><strong>Setup</strong>: Clone repository and install dependencies</p></li>
<li><p><strong>Configuration</strong>: Create local config file</p></li>
<li><p><strong>Development</strong>: Write code with hot reload</p></li>
<li><p><strong>Testing</strong>: Run comprehensive test suite</p></li>
<li><p><strong>Integration</strong>: Test with local blockchain</p></li>
</ol>
<div class="highlight-bash notranslate"><div class="highlight"><pre><span></span><span class="c1"># Development workflow</span>
git<span class="w"> </span>clone<span class="w"> </span>https://github.com/anusornc/provchain-org.git
<span class="nb">cd</span><span class="w"> </span>provchain-org

<span class="c1"># Setup development environment</span>
cargo<span class="w"> </span>build
cp<span class="w"> </span>config.example.toml<span class="w"> </span>config.toml

<span class="c1"># Run tests</span>
cargo<span class="w"> </span><span class="nb">test</span>

<span class="c1"># Start development server</span>
cargo<span class="w"> </span>run<span class="w"> </span>--bin<span class="w"> </span>demo_ui
</pre></div>
</div>
</section>
<section id="production-deployment">
<h3>Production Deployment</h3>
<ol class="arabic simple">
<li><p><strong>Build</strong>: Create optimized release build</p></li>
<li><p><strong>Configuration</strong>: Production configuration</p></li>
<li><p><strong>Deployment</strong>: Deploy to infrastructure</p></li>
<li><p><strong>Monitoring</strong>: Set up monitoring and logging</p></li>
<li><p><strong>Maintenance</strong>: Regular updates and backups</p></li>
</ol>
<div class="highlight-bash notranslate"><div class="highlight"><pre><span></span><span class="c1"># Production deployment</span>
cargo<span class="w"> </span>build<span class="w"> </span>--release

<span class="c1"># Deploy with Docker</span>
docker<span class="w"> </span>build<span class="w"> </span>-t<span class="w"> </span>provchain-prod<span class="w"> </span>.
docker<span class="w"> </span>run<span class="w"> </span>-d<span class="w"> </span>--name<span class="w"> </span>provchain<span class="w"> </span><span class="se">\</span>
<span class="w">  </span>-p<span class="w"> </span><span class="m">8080</span>:8080<span class="w"> </span><span class="se">\</span>
<span class="w">  </span>-v<span class="w"> </span>/data:/app/data<span class="w"> </span><span class="se">\</span>
<span class="w">  </span>provchain-prod
</pre></div>
</div>
</section>
</section>
<section id="ecosystem-integration">
<h2>Ecosystem Integration</h2>
<section id="existing-systems">
<h3>Existing Systems</h3>
<p>ProvChainOrg integrates with existing enterprise systems:</p>
<ul class="simple">
<li><p><strong>ERP Systems</strong>: SAP, Oracle, Microsoft Dynamics</p></li>
<li><p><strong>Supply Chain Management</strong>: JDA, Manhattan Associates</p></li>
<li><p><strong>IoT Platforms</strong>: AWS IoT, Azure IoT, Google Cloud IoT</p></li>
<li><p><strong>Databases</strong>: PostgreSQL, MongoDB, Neo4j</p></li>
</ul>
</section>
<section id="standards-compliance">
<h3>Standards Compliance</h3>
<p>Built on open standards for maximum interoperability:</p>
<ul class="simple">
<li><p><strong>W3C RDF</strong>: Resource Description Framework</p></li>
<li><p><strong>W3C SPARQL</strong>: Query language for RDF</p></li>
<li><p><strong>W3C OWL</strong>: Web Ontology Language</p></li>
<li><p><strong>JSON-LD</strong>: Linked Data in JSON</p></li>
<li><p><strong>WebSocket</strong>: Real-time communication</p></li>
</ul>
</section>
</section>
<section id="next-steps">
<h2>Next Steps</h2>
<p>Now that you understand the ProvChainOrg stack:</p>
<ol class="arabic simple">
<li><p><strong>Explore Components</strong>: Learn about specific stack components</p></li>
<li><p><strong>Try Development</strong>: Follow the <a class="reference internal" href="../tutorials/first-supply-chain.xhtml"><span class="doc">Your First Supply Chain Application</span></a> tutorial</p></li>
<li><p><strong>Read API Docs</strong>: Check out <a class="reference internal" href="../api/rest-api.xhtml"><span class="doc">REST API Reference</span></a> and <span class="xref std std-doc">../api/sparql-endpoints</span></p></li>
<li><p><strong>Join Community</strong>: Contribute to the open source project</p></li>
</ol>
<p><strong>Deep Dive Topics:</strong>
- <span class="xref std std-doc">smart-ontologies</span> - Semantic validation and reasoning
- <span class="xref std std-doc">development-frameworks</span> - Tools and libraries
- <span class="xref std std-doc">client-apis</span> - Integration interfaces
- <span class="xref std std-doc">storage-systems</span> - Data persistence and querying</p>
<p>The ProvChainOrg stack provides everything needed to build production-ready semantic blockchain applications for supply chain traceability, from development tools to deployment infrastructure.</p>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>