# Ontology-aware query to trace a product batch through the supply chain
# This query uses the traceability ontology classes to find the complete trace

PREFIX core: <http://provchain.org/core#>
PREFIX prov: <http://www.w3.org/ns/prov#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT ?batch ?batchId ?activity ?activityType ?agent ?agentType ?timestamp ?conditions WHERE {
    # Find the target batch
    ?batch a core:Batch ;
           core:hasIdentifier ?batchId .
    
    # Find activities that used or generated this batch
    {
        ?activity prov:used ?batch .
    } UNION {
        ?batch prov:wasGeneratedBy ?activity .
    }
    
    # Get activity details
    ?activity a ?activityType ;
              core:recordedAt ?timestamp .
    
    # Filter for ontology activity types
    FILTER(?activityType = core:ManufacturingProcess || 
           ?activityType = core:TransportProcess || 
           ?activityType = core:QualityControlProcess)
    
    # Find associated agents
    OPTIONAL {
        ?activity prov:wasAssociatedWith ?agent .
        ?agent a ?agentType .
        FILTER(?agentType = core:Supplier || 
               ?agentType = core:Manufacturer || 
               ?agentType = core:LogisticsProvider || 
               ?agentType = core:Retailer)
    }
    
    # Find environmental conditions if present
    OPTIONAL {
        ?activity core:hasCondition ?condition .
        ?condition core:hasTemperature ?temp ;
                   core:hasHumidity ?humidity ;
                   core:hasConditionTimestamp ?condTime .
        BIND(CONCAT("Temp: ", STR(?temp), "Â°C, Humidity: ", STR(?humidity), "%") AS ?conditions)
    }
    
    # Filter for a specific batch ID (change this value as needed)
    FILTER(?batchId = "MB001")
}
ORDER BY ?timestamp
