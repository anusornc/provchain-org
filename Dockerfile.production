# Multi-stage Docker build for ProvChainOrg production deployment
# Stage 1: Build the Rust backend
FROM rust:1.75-slim as backend-builder

# Install system dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    libclang-dev \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy Cargo files for dependency caching
COPY Cargo.toml Cargo.lock ./
COPY owl2_rs/ ./owl2_rs/

# Create dummy main.rs to build dependencies
RUN mkdir src && echo "fn main() {}" > src/main.rs
RUN cargo build --release --bin provchain-org
RUN rm -rf src

# Copy source code and build the application
COPY src/ ./src/
COPY ontologies/ ./ontologies/
COPY config/ ./config/
COPY queries/ ./queries/
COPY shapes/ ./shapes/

# Build the final binary
RUN cargo build --release --bin provchain-org

# Stage 2: Build the frontend
FROM node:18-alpine as frontend-builder

WORKDIR /app/frontend

# Copy package files for dependency caching
COPY frontend/package*.json ./
RUN npm ci --only=production

# Copy frontend source and build
COPY frontend/ ./
RUN npm run build

# Stage 3: Production runtime
FROM debian:bookworm-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    libssl3 \
    && rm -rf /var/lib/apt/lists/* \
    && useradd -r -s /bin/false -m -d /app provchain

# Set working directory
WORKDIR /app

# Copy the built binary from backend builder
COPY --from=backend-builder /app/target/release/provchain-org /usr/local/bin/provchain-org

# Copy configuration files
COPY --from=backend-builder /app/config/ ./config/
COPY --from=backend-builder /app/ontologies/ ./ontologies/
COPY --from=backend-builder /app/queries/ ./queries/
COPY --from=backend-builder /app/shapes/ ./shapes/

# Copy built frontend
COPY --from=frontend-builder /app/frontend/dist/ ./static/

# Create necessary directories
RUN mkdir -p /app/data /app/backups /app/logs \
    && chown -R provchain:provchain /app

# Switch to non-root user
USER provchain

# Expose ports
EXPOSE 8080 9090

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Set environment variables
ENV RUST_LOG=info
ENV JWT_SECRET=""
ENV CONFIG_FILE=/app/config/production-deployment.toml

# Run the application
CMD ["provchain-org", "--config", "/app/config/production-deployment.toml"]
